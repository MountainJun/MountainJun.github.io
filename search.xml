<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔记第一阶段</title>
      <link href="/2020/07/10/%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
      <url>/2020/07/10/%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>title:测试理论</p><p>data：2020-07-17  20:12:12</p><p>tags：无聊的笔记</p><p>计算机的层次</p><p>​        为了更好的理解计算机把计算机分为三个层次：</p><p>​        计算机硬件/裸机—操作系统—应用软件</p><h2 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h2><p>​        <strong>软件  =  程序 + 数据 + 文档</strong></p><h2 id="什么是软件缺陷？"><a href="#什么是软件缺陷？" class="headerlink" title="什么是软件缺陷？"></a>什么是软件缺陷？</h2><h3 id="软件缺陷的定义-一："><a href="#软件缺陷的定义-一：" class="headerlink" title="软件缺陷的定义 一："></a>软件缺陷的定义 一：</h3><p>​    只要满足下列规则之一则称之为发生了一个软件缺陷：</p><p>​    1.软件未实现产品说明书需求的功能</p><p>​    2.软件出现了产品说明书指明不应该出现的功能</p><p>​    3.实现了产品说明书未提及的功能</p><p>​    4.软未来实现产品说明书虽未明确提及但应该有的功能</p><p>​    5.软件难以理解、不易使用、运算缓慢、或者从测试员的角度看最终用户会认为不好。</p><h3 id="软件缺陷的定义-二："><a href="#软件缺陷的定义-二：" class="headerlink" title="软件缺陷的定义 二："></a>软件缺陷的定义 二：</h3><p>​    美国电气和电子工程师协会（EEE）对缺项的定义：</p><p>​    从产品内部看：缺陷是软件产品开发或维护过程中存在的错误、毛病的各种问题。从产品外部看：缺陷是系统所需要实现的某种功能的实效或违规背。</p><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><p>​        在现有的软件中寻找缺陷的过程</p><p><strong>测试的目的</strong>：</p><p>​    1.发现隐藏在软件中的错误缺陷，并将齐修复。</p><p>​    2.最大程序的找出软件中的错误或缺陷，并将其修复</p><p>​    3.提升软件的质量</p><p><strong>测试的对象</strong>：</p><p>​    需求文档    概要设计    详细设计    <strong>程序</strong>    <strong>数据</strong>    用户文档等</p><h4 id="测试流程："><a href="#测试流程：" class="headerlink" title="测试流程："></a><strong>测试流程：</strong></h4><p>需求分析—编写测试计划—编写测试方案，进行测试设计—编写测试用例—测试用例评审—修改完善测试用例—搭建测试环境—执行测试，提交BUG—更新测试环境—回归测试—编写测试报告</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>​    主要针对给用户使用的功能</p><h4 id="黑盒测试中常用方法"><a href="#黑盒测试中常用方法" class="headerlink" title="黑盒测试中常用方法"></a>黑盒测试中常用方法</h4><ul><li><p><strong>等价类划分法</strong></p><p> 在等价范围中：发现BUG的效果一样。</p><p>  分：有效/无效等价类（根据需求文档判定）</p><pre><code>有效：符合需求文档的合格软件测试输入数据的集合 </code></pre><p>​        无效：不符合需求文档的无意义的软件测试数据集合</p></li></ul><ul><li><p><strong>边界值分析法</strong></p><p>边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。 通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。 长期的测试工作经验告诉我们，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。</p></li><li><p>因果图法</p><p>利用因果图生成测试用例一般要经过以下几个步骤：</p><p>（1）分析软件规格说明描述中, 明确哪些是原因(即输入条件或输入条件的等价类)和哪些是结果(即输出条件)，并给每个原因和结果赋予一个标识符。</p><p>（2）分析软件规格说明描述中的语义，找出原因与结果之间,，原因与原因之间对应的关系，根据这些关系，画出因果图。</p><p>（3）由于语法或环境限制, 有些原因与原因之间,原因与结果之间的组合情况不可能出现，为表明这些特殊情况, 在因果图上用一些记号表明约束或限制条件。</p><p>（4）把因果图转换为判定表。</p><p>（5）把判定表的每一列拿出来作为测试依据，完成测试用例设计。</p></li><li><p>决策法</p></li><li><p><strong>错误推测法</strong></p></li><li><p>正交实验法</p><p>​    应用场景：在一个界面中有多个控件，每个控件有多个取值，控件之间可以相互组    合，不可能（也没有必要）为每一种组合编写一条用例，如何使用最少最优的组合    进行测试。——正交排列法</p><p>​    判定表，因果图也是考虑控件组合，但是组合数量较少（一般不会超过20中）</p></li><li><p><strong>场景法</strong></p><p>​    场景法是通过运用场景来对系统的功能点或业务流程的描述，从而提高测试效果的一种方法。</p><p>场景法一般包含基本流和备用流，从一个流程开始，通过描述经过的路径来确定的过程，经过遍历所有的基本流和备用流来完成整个场景。场景主要包括4种主要的类型：正常的用例场景，备选的用例场景，异常的用例场景，假定推测的场景。</p><p><strong>基本流</strong></p></li></ul><ul><li>等</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>​    针对结构的测试        </p><p>​    程序员测试、结构测试、逻辑驱动测试</p><h3 id="黑盒测试与白盒测试的区别"><a href="#黑盒测试与白盒测试的区别" class="headerlink" title="黑盒测试与白盒测试的区别"></a>黑盒测试与白盒测试的区别</h3><table><thead><tr><th></th><th>黑盒测试</th><th align="center">白盒测试</th></tr></thead><tbody><tr><td>规划方面</td><td>针对功能测试</td><td align="center">针对结构测试</td></tr><tr><td>优势方面</td><td>能确保从用户使用角度出发进行测试</td><td align="center">能够对程序内部的特征部位进行覆盖测试</td></tr><tr><td>应用举例</td><td>等价划分  边界值分析法  因果图法  状态图测试法</td><td align="center">语句覆盖、判断覆盖、条件覆盖、判断/条件覆盖、基本路径覆盖、循环覆盖、模块接口测试</td></tr></tbody></table><h3 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h3><p>​    介于白盒测试与黑盒测试之间的测试。</p><p>​    结合了白盒测试盒黑盒测试的要素。灰盒测试关注输出对于输入的正确性；同时也关注内部表现，但这种关注不像白盒测试那样详细、完整，只是通过一些表征的现象，事件、标志来判断内部的运行状态。</p><h3 id="按是否需要运行代码（状21"><a href="#按是否需要运行代码（状21" class="headerlink" title="按是否需要运行代码（状21"></a>按是否需要运行代码（状21</h3><h3 id="态）划分"><a href="#态）划分" class="headerlink" title="态）划分"></a>态）划分</h3><h4 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h4><p>静态测试是指不实际运行被测试软件，而只是静态检查程序代码、界面或者文档中可能存在的错误。</p><p>静态测试技术又称为静态分析技术，实际上对软件中的需求说明书、设计说明书、程序源代码的进行非运行的检查。</p><p>静态测试包括：代码测试（代码查找）、界面测试、文档测试等</p><blockquote><p>代码测试，主要测试是否符合相应的的标准和规范。</p><p>界面测试，主要测试软件的实际界面与需求中说明是否相符。</p><p>文档测试，主要测试用户手册和需求说明是否真正符合用户的实际需求。</p></blockquote><h4 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h4><p>​    动态测试是指通过人工或使用工具运行的程序进行检查、分析程序的执行状态和程序的外部表现</p><p>​    实际运行被测程序，输入相应的测试数据，检查实际输出结果和预期结果是否相符</p><h3 id="安软件特性分类"><a href="#安软件特性分类" class="headerlink" title="安软件特性分类"></a>安软件特性分类</h3><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><h4 id="反测"><a href="#反测" class="headerlink" title="反测"></a>反测</h4><h4 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h4><h4 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h4><h2 id="软件开发与测试流程"><a href="#软件开发与测试流程" class="headerlink" title="软件开发与测试流程"></a>软件开发与测试流程</h2><h3 id="1、软件开发阶段划分"><a href="#1、软件开发阶段划分" class="headerlink" title="1、软件开发阶段划分"></a>1、软件开发阶段划分</h3><h4 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h4><blockquote><p>​        根据客户的要求,清楚了解客户需求中的产品功能、性能、界面和具体规格等,        然后进行分析,确定软件产品所要达到的目标。</p><p>​        需求规格说明书</p></blockquote><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><pre><code>系统分析员审查软件计划、软件需求分析提供的文档。提出候选的最佳推荐方案,    确定模块结构,划分功能模块，将软件功能需求分配给所划分的最小单元模块，确定模块间的联系,确定数据结构、文件结构、数据库模式等。    概要设计说明</code></pre><h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><pre><code>为每一个模块确定使用的算法,并用适当的工具(如流程图)表达算法的过程,写出模块的详细过程性描述;确定每个模块使用的数据结构;确定模块接口的细节,包括用户界面、数据输入输出等全部细节。详细设计说明书</code></pre><p>​    </p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>​        通过某种语言编写程序</p><h3 id="软件测试阶段划分"><a href="#软件测试阶段划分" class="headerlink" title="软件测试阶段划分"></a>软件测试阶段划分</h3><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><blockquote><p>​    单元测试又称模块测试，是针对软件设计最小单位—程序模块运行正确性检验的    测试工作类、文件、窗口、函数、菜单、报表或一个存储过程可以作为个单元进    行测试</p></blockquote><p>​    单元测试以白盒测试为主</p><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><blockquote><p>​    也叫做组装测试，通常在单元测试的基础上，将所有，模块进行有序的、递增的    测试</p></blockquote><h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><blockquote><p>​    系统测试是在真实或模拟系统运行环境下，检查完整的程序系统能否和系统（包    括插件、外键、网络和系统软件、支持平台等）正确匹配、链接，并满足用户要    求。</p><p>​    系统测试是为了验证和确认系统是否达到其原始目标，而对集成测试的硬件和软    件系统进行测试</p></blockquote><h4 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h4><h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><blockquote><p>​    按照项目任务书或合同、需双方约定的验收依据文档进行对整个系统的测试与审，    决定是否接收或拒收项目</p><p>​    以用户为主的测试，软件开发的质量保证员也参与。</p></blockquote><h3 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h3><h5 id="1-软件的状态：软件运行到某个时刻所处的情况"><a href="#1-软件的状态：软件运行到某个时刻所处的情况" class="headerlink" title="1.软件的状态：软件运行到某个时刻所处的情况"></a>1.软件的状态：软件运行到某个时刻所处的情况</h5><h5 id="2-输入的动作：用户向软件进行的操作"><a href="#2-输入的动作：用户向软件进行的操作" class="headerlink" title="2.输入的动作：用户向软件进行的操作"></a>2.输入的动作：用户向软件进行的操作</h5><h4 id="状态图转换概念"><a href="#状态图转换概念" class="headerlink" title="状态图转换概念"></a>状态图转换概念</h4><blockquote><p>​    找出软件所有的状态以及导致这些状态发生变化所输入动作，进行图形的方法把相    关联的输入动作和状态联系在一起，真实模拟用户的操作顺序进行设计测试用例。</p></blockquote><h5 id="状态转换图的核心："><a href="#状态转换图的核心：" class="headerlink" title="状态转换图的核心："></a>状态转换图的核心：</h5><blockquote><p>​    （1）软件所有状态</p><p>​    （2）导致状态发生变化的所有输入动作</p></blockquote><h4 id="使用状态转换图法的步骤"><a href="#使用状态转换图法的步骤" class="headerlink" title="使用状态转换图法的步骤"></a>使用状态转换图法的步骤</h4><blockquote><p>​    <strong>1.找出程序的所有输入动作，进行编程</strong></p><p>​        列出用户能够向软件输入的每一个动作，并进行编号</p><p>​    <strong>2.找出程序的所有状态</strong></p><p>​        可以认为用户每输入一个动作就会使程序的状态发生变化</p><p>​        如果不能决定是否为一个独立状态，可以先假设‘是’</p><p>​    <strong>3.找出什么动作会导致什么样的状态发生，画出状态图（一般情况下这是一        个反复的        过程）</strong></p><p>​    <strong>4.把相关联的动作和状态联系起来，设计成测试用例</strong></p></blockquote><h2 id="软件缺陷和缺陷报告"><a href="#软件缺陷和缺陷报告" class="headerlink" title="软件缺陷和缺陷报告"></a>软件缺陷和缺陷报告</h2><h3 id="测试人员的主要工作职责"><a href="#测试人员的主要工作职责" class="headerlink" title="测试人员的主要工作职责"></a>测试人员的主要工作职责</h3><pre><code>1.  编写测试计划2.  编写测试方案3.  编写测试用例4.  执行测试，提交缺陷报告5.  编写测试总结报告</code></pre><h3 id="编写缺陷报告"><a href="#编写缺陷报告" class="headerlink" title="编写缺陷报告"></a>编写缺陷报告</h3><h4 id="缺陷报告"><a href="#缺陷报告" class="headerlink" title="缺陷报告"></a>缺陷报告</h4><p>​    当测试人员发现了一个缺陷，需要填写一份“缺陷报告”来记录这个缺陷，并且通过这个缺陷报告告知开发人员所发生的问题–缺陷报告是测试人员可开发交流沟通的工具。</p><h4 id="缺陷报告的重要组成"><a href="#缺陷报告的重要组成" class="headerlink" title="缺陷报告的重要组成"></a>缺陷报告的重要组成</h4><ol><li><p>缺陷编号（Defect  ID）</p></li><li><p>缺陷标题（summary）</p></li><li><p>缺陷的发现者（Detected  By）</p></li><li><p>发现缺陷的日期（detected  on  date）</p></li><li><p>缺陷所属的模块（subject）</p></li><li><p>发现缺陷版本（detected  in release）</p></li><li><p>指派给谁处理（Assigned  to）</p></li><li><p>缺陷的状态</p><p>​    缺陷的状态(status):描述缺陷此时所处的状态。</p><p>​    例如:<br>​    新提交的缺陷–new<br>​    打开的缺陷–open<br>​    被拒绝的缺陷–rejected<br>​    已经被修改完的缺陷–fixed<br>​    重新打开的缺陷–reopen<br>​    关闭的缺陷–closed </p><ol start="9"><li>缺陷的严重程度</li></ol><p>缺陷的严重程度(severity):指明该缺陷对软件造成的影响程度有多大<br>例如:</p><pre><code>造成死机或影响开发、测试进度的问题--Ur gent        阻塞非常严重的功能问题--Very High                                    严重大的功能问题--High                                                            高中等程度的功能问题一Medium    中，                         一般小的功能问题--Low                                                            低</code></pre><p>注意:</p><pre><code>每个单词代表的具体含义每个公司可能是不一样，应该在测试计划或是在专门        的文档中定义好，以便测试人员和开发人员达成一致</code></pre><p>案例:</p><pre><code>手机测试公司bug leve1 Definition </code></pre><ol start="10"><li><p>缺陷的优先级<br>缺陷的优先级(priority) :希望该缺陷什么时间内或者哪个版本程序员可以解决<br>例如:</p><pre><code>Urgent--立刻修复Very High-- 本版本修复High--下一个版本修复</code></pre><p>   Medium–发布之前修复<br>   Low–允许在发布产品中存在<br>注意:<br>   同样，每个单词代表的具体含义每个公司可能是不一样，应该在测试计划或是                     专门的文档中定义好</p></li><li><p>缺陷的描述</p><p>缺陷描述(description) :把发现这个缺陷的具体步骤记录下来，使开发人员通过你的描述可以看到这个缺陷，以便他去解决这个缺陷</p><p>​    要求:<br>​        描述清晰、准确、易读，使开发人员容易读懂，并可以重现缺陷(初学者练习的重点、难点)。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1、缺陷的严重程度和优先级是不是成正比关系?<br>例如:<br> 界面问题的严重程度-般比较低，但优先级可能最高—立即修复<br> 某些重大的功能问题可能暂时解次不了，但不影响软件其他功能的使用，这时优    先级可能定义的比较低- – - 在发布之前修复<br>2、缺陷的严重程度和优先级确定好以后，还会改吗?<br>例如:<br> 测试人员确定- -个缺陷为“立即修复”，但开发组认为这个缺陷不太好解决，而这    个缺陷又不影响其他功能，这时可能要求在”下一个版本修改”或“发布之前修改”。<br>3、是不是所有已发现的缺陷都会被修复的?</p><pre><code>有些缺陷修复的成本太高或者由于进度压力可能在发布之前得不到修复，这样        的缺陷一定要经过项目组的讨论，权衡成本和风险，要确保不会对用户造成重        大的影响及法律纠纷。后面再通过升级软件或打补丁的方式修复缺陷或弥补缺        陷</code></pre><h4 id="缺陷报告的用途"><a href="#缺陷报告的用途" class="headerlink" title="缺陷报告的用途"></a>缺陷报告的用途</h4><p>​    记录软件缺陷<br>​    对缺陷进行分类<br>​    跟踪软件缺陷</p><p>​    用于缺陷的分析、总结</p><h4 id="软件缺陷的识别"><a href="#软件缺陷的识别" class="headerlink" title="软件缺陷的识别"></a>软件缺陷的识别</h4><p>​    通过测试用例中的预期结果进行识别<br>​    通过需求规格说明书进行识别<br>​    通过和开发人员、需求人员、用户沟通进行识别</p></li></ol></li></ol><pre><code>#### 写缺陷报告时注意的问题​        一个报告只提交一一个缺陷​        缺陷描述清晰、准确、易读，使用最少、必须的步骤，保证缺陷可以再现​        对缺陷的严重性、优先级的划分准确、客观**其他需要注意的问题:**在提交缺陷报告之前一定要认真审核，确保提交的缺陷是有效的，而不是因为自己的疏忽或操作不正确造成的“假缺陷”​        不要为了引起开发人员的重视而夸大缺陷​        小的缺陷也要报告​        及时报告缺陷​        对于不可重现的缺陷也要报告​        不做任何评价</code></pre><h3 id="软件缺陷报告的处理流程"><a href="#软件缺陷报告的处理流程" class="headerlink" title="软件缺陷报告的处理流程"></a>软件缺陷报告的处理流程</h3><h3 id="缺陷的生命周期"><a href="#缺陷的生命周期" class="headerlink" title="缺陷的生命周期"></a>缺陷的生命周期</h3><h2 id="软件测试计划"><a href="#软件测试计划" class="headerlink" title="软件测试计划"></a>软件测试计划</h2><p>​    <strong>定义：软件测试计划就是在软件测试工作正式实施之前明确测试的对象，并且通过对    资源、时间、风险、测试范围和预算等方面的综合分析和规划，保证有效实施软件测试。</strong></p><h4 id="测试计划概述应用："><a href="#测试计划概述应用：" class="headerlink" title="测试计划概述应用："></a>测试计划概述应用：</h4><p>​        软件测试计划应当尽早的制定</p><p>​        软件测试计划在测试活动中处于中心位置</p><p>​        它设定了测试准备工作和执行测试的必备条件</p><p>​        同时形成了测试过程质量保证基础</p><h3 id="测试计划常见的格式与写法："><a href="#测试计划常见的格式与写法：" class="headerlink" title="测试计划常见的格式与写法："></a>测试计划常见的格式与写法：</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>产品简介</p><p>测试的目的</p><p>测试范围</p><h5 id="测试参考文档和测试提交文档"><a href="#测试参考文档和测试提交文档" class="headerlink" title="测试参考文档和测试提交文档"></a>测试参考文档和测试提交文档</h5><p>测试参考文档</p><p>测试提交文档</p><h5 id="测试资源"><a href="#测试资源" class="headerlink" title="测试资源"></a>测试资源</h5><p>人力资源</p><p>测试环境</p><p>测试工具</p><h5 id="问题严重性及优先级描述"><a href="#问题严重性及优先级描述" class="headerlink" title="问题严重性及优先级描述"></a>问题严重性及优先级描述</h5><p>缺陷严重级别定义</p><p>缺陷优先级定义</p><p>缺陷跟踪及测试版本</p><h5 id="测试风险"><a href="#测试风险" class="headerlink" title="测试风险"></a>测试风险</h5><p>时间资源</p><p>人力资源</p><p>测试版本</p><p>需求变更</p><p>其他</p><h5 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h5><p>数据库测试</p><p>功能测试</p><p>用户界面测试</p><p>性能评价</p><p>兼容性测试</p><p>安全性测试</p><h5 id="测试的进度"><a href="#测试的进度" class="headerlink" title="测试的进度"></a>测试的进度</h5><h1 id="测试策略类型"><a href="#测试策略类型" class="headerlink" title="测试策略类型"></a>测试策略类型</h1><h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><p>一：功能测试</p><p>​    菜单、工具栏、下拉框、按钮、单选按钮、切换、链接、触发键</p><p>二：界面测试</p><p>​    登陆界面、总界面、输入界面(增、删、改、查)、处理界面、输出界面、报表</p><p>​    界面、提示界面</p><p>三：容错测试</p><p>​    数据长度、数据类型、非法操作</p><p>四：接口测试</p><p>​    接口测试也叫业务流程测试(包括功能模块之间、模块与模块之间、子系统之</p><p>​    间)</p><p>​    接口：例如：导入、导出(通俗的讲是接口就是调用)</p><p>五：性能测试(TPS吞吐量、响应速度、cpu占用率、内存占用率)</p><p>​    平均吞吐量：单位时间内处理事务的个数</p><p>​    平均响应速度：做一个事务处理所用时间</p><p>​    例如：界面操作效率测试;报表输出及查询效率测试</p><p>六：负载测试(压力测试、强度测试、容量测试)</p><p>​    压力测试即就是大用户测试(针对B/S而言)</p><p>​    容量测试即就是大数据量测试</p><p>七：并发测试</p><p>​    指多个用户在同一时间对同一条数据的删除或者修改等处理</p><p>八：稳定性测试</p><p>​    例如：1小时触发600条信息，那么8个、10个等发信息的条数测试</p><p>九：恢复测试</p><p>​    突然断电(系统触发正常启动;数据包要在断电的地方继续进行处理)</p><p>十：配置测试</p><p>​    推荐配置：大多数用户所用的配置</p><p>十一：安装测试</p><p>​    安装过程;运行过程；卸载过程;</p><p>十二：文档测试</p><p>​    交给用户的文档。例如：系统帮助、用户使用手册、用户安装手册</p><p>十三：可用性测试</p><p>十四：初始化测试</p><p>​    是指系统刚刚安装完成后，在数据为空的情况下，如果被调用的模块为空，点</p><p>​    击调用模块的时候，是否进行容错的测试。</p><p>十五：数据完整性测试</p><p>​    是指当主表的某一条件信息被删除后，和这一条相关的从表的信息都应该被删</p><p>​    除</p><p>　　如果某些数据的主键是由数据库本身而实现的，可以不用删除，如果有些</p><p>主从表是由程序员写的代码而实现，则要进行数据完整性的测试。</p><p><strong><em>注：***</em></strong>性能测试、负载测试、并发测试需要产品稳定和相对应比较成熟的服务器***</p><p><strong><em>与环境来进行测试，条件暂时不满足，后续优化。\</em></strong></p><h2 id="软件测试方案"><a href="#软件测试方案" class="headerlink" title="软件测试方案"></a>软件测试方案</h2><h3 id="测试方案的目的"><a href="#测试方案的目的" class="headerlink" title="测试方案的目的"></a>测试方案的目的</h3><p><strong>在方向上明确要怎么测，以及达到什么样的质量标注。（测试工程师需要基于产品功能需求和测试方案来设计和执行测试用例，同时也要参考产品设计说明文档）</strong></p><p>​    软件测试方案有助于软件项目成员理解和执行过程中的各项活动，同时测试方案也有助于测试过程中的各项活动，同时测试方案也有助于测试活动的管理</p><p>测试计划与测试方案的区别</p><table><thead><tr><th></th><th>测试计划</th><th>测试方案</th></tr></thead><tbody><tr><td>编写目的</td><td>1.领导能够根据测试计划做宏观调控，进行相应的资源配置等；<br />2.测试人员能够了解整个项目测试情况及不同测试阶段所需要的进行的工作等；<br />3.便于与其他人员了解测试人员的工作类容，进行相关配合工作；</td><td>测试方案是从测试角度去分析或分解需求，在方向上明确怎么测，分析结果就是测试点和测试方法。</td></tr><tr><td>定义不同</td><td>测试计划是对测试过程的组合、资源、原则等进行规定和约束。</td><td>而测试方案规则是描述所测试软件的特性、测试方法、测试用例设计、测试代码设计、测试环境规则以及测试工具设计和选择的一种策略与方法</td></tr><tr><td>层次不同</td><td>测试计划是管理层面的，从组织管理的角度规划测试活动。</td><td>而测试方案是技术层面的，从技术的角度规划测试活动。</td></tr><tr><td>编写时间和依据</td><td>测试流程：测试计划阶段–&gt;测试设计阶段–&gt;测试实现阶段–&gt;测试执行阶段。<br />依据《项目计划》和《需求规格说明书》</td><td>依据《需求规格说明书》和《概要设计说明书》</td></tr><tr><td>类容不同</td><td>1.进行测试任务划分；<br />2.进行测试工作量估计；3.人员和物力资源分配；<br />4.明确任务的时间和进度安排；<br />5风险估计和应急计划；<br /> 6.测试计划通过失败的标准</td><td>1.测试策略选取；<br />2.测试子项分细；<br />3.测试用例的规划；<br />4.测试环境的规划；<br />5.自动化测试框架的设计；<br />6.测试工具的设计和选择</td></tr></tbody></table><p><strong>总而言之，测试方案需要在测试计划的指导进行，测试计划提出“做什么”。测试方案明确“怎么做”，方案是对计划进一步细化和明确。</strong></p><h4 id="如何制定测试策略"><a href="#如何制定测试策略" class="headerlink" title="如何制定测试策略"></a>如何制定测试策略</h4><p>​    一个好的测试策略应该包括下列内容：</p><p>​    实施的测试类型和测试目标</p><p>​    实施测试的阶段</p><p>​    技术</p><p>​    用于评价测试结果和测试是否完成的评测和标准</p><p>​    对测试策略所描述的测试工作存在影响和特殊事项</p><h4 id="测试资源情况"><a href="#测试资源情况" class="headerlink" title="测试资源情况"></a>测试资源情况</h4><p>​    一帮情况下，团队同时有多个项目，测试PM需要根据项目的优先级来确定每个项目的测试资源，一般情况的测!试资源，软件测试资源主要包括：人力和设备机器</p><h4 id="测试进度计划"><a href="#测试进度计划" class="headerlink" title="测试进度计划"></a>测试进度计划</h4><p>​    根据测试需求和策略，结合项目优先级和测试资源情况，评估测试进度计划，一般情况下，测试资源越充分，测试进度月乐观，但非绝对，有些时候一些软件bug会阻塞测试进度，这也是项目风险的一部分。</p><h4 id="测试风险管理"><a href="#测试风险管理" class="headerlink" title="测试风险管理"></a>测试风险管理</h4><p>​    在测试执行开始之前,对可能的风险进行分析和识别很重要，可以提前进行预防和采取应对措施,所以项目过程中,我们需要定期评估测试进度情况,提前进行风险预警。</p><h4 id="质量标准"><a href="#质量标准" class="headerlink" title="质量标准"></a>质量标准</h4><p>​    质量是指测试项目需要达到的标准,各个公司和项目都会有相应的标准要求,由于质量标准可以是公司内多数项目共识,所以也可以不必在测试方案中列出。对测试项目来说,比较常见的是以测试用例执行率、通过率和未关闭BUG级别/数量来设定质量标准</p><h4 id="常见的方案里用到的测试类型"><a href="#常见的方案里用到的测试类型" class="headerlink" title="常见的方案里用到的测试类型"></a>常见的方案里用到的测试类型</h4><p>​    功能测试</p><p>​    界面测试</p><p>​    安全测试</p><p>​    本地/国际化测试用例</p><p>​    数据库测试</p><p>​    可靠性测试</p><p>​    集成测试</p><p>​    兼容性测试</p><p>​    自动化测试</p><p>​    性能测试</p><p>​    回归测试</p><h4 id="常规的测试方案内容"><a href="#常规的测试方案内容" class="headerlink" title="常规的测试方案内容"></a>常规的测试方案内容</h4><ol><li><p>方案首页及文档标识</p></li><li><p>方案修订记录</p></li><li><p>方案目录</p></li><li><p>方案概述</p></li></ol><p>​        1）编写目的</p><p>​        2）读者对象</p><p>​        3）项目top图</p><p>​        4）项目各模块说明</p><p>​        5）项目需求分析</p><ol start="5"><li>功能<ol><li>功能需求分析</li><li>功能需求点</li><li>性能需求点</li></ol></li><li>列出项目测试点进行具体的测试方案描述（针对功能点“怎么测试？”）</li></ol><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h1 id="测试总结报告"><a href="#测试总结报告" class="headerlink" title="测试总结报告"></a>测试总结报告</h1><p><strong>一、**</strong>软件缺陷及提交缺陷**</p><p><strong>缺陷的原因</strong></p><p>大部分客户不懂软件开发技术，提出的需求不明确，或者提出的需求本身是矛盾的</p><p>软件产品的制造商无法百分之百地收集到用户地所有使用需求</p><p>在软件的需求调研和设计阶段存在的各种问题会导致用户需求被错误地理解和传递</p><p>用户需求随着工作或使用环境的变化，以及时间的推移也会随之改变</p><p>软件技术的发展落后于不断复杂的软件需求</p><p> <strong>缺陷管理的目的</strong></p><p>缺陷管理目的是对各阶段测试发现的缺陷进行跟踪管理，以保证各级缺陷的修复率达到标准，主要实现以下目标：</p><p>1、及时了解并跟踪每个被发现的缺陷；</p><p>2、确保每个被发现的缺陷都能被处理</p><p>3、收集缺陷数据，并在其上进行数据分析，作为组织过程的财富</p><p><strong>二、**</strong>测试总结报告的主要内容**</p><p><strong>常见的测试总结报告包含有以下几大内容：</strong></p><p><strong>1、**</strong>概述**</p><p>概述一般包含有参考资料、项目网拓扑、相关版本信息、发布版本主要新增修改问题</p><p><strong>2、**</strong>测试内容**</p><p>测试内容主要包含硬件版本升级/降级方法步骤、功能测试、非功能测试（包含性能、稳定、可靠等）、其他</p><p><strong>3、**</strong>测试环境**</p><p><strong>4、**</strong>缺陷问题及分析**</p><p>该部分内容主要进行本版本新增数据分析、项目历史遗留缺陷的分析、主要缺陷说明、缺陷分类分析、版本缺陷走势</p><p><strong>5、**</strong>测试总结**</p><p><strong>6、**</strong>其他相关注意事项说明**</p><p>**<br>**</p><p><strong>数据统计</strong></p><p>1、数据统计-人力投入</p><p>2、数据统计-用例覆盖率、执行率、通过率</p><p>3、数据统计-问题单分类统计</p><p>4、遗留bug情况</p><p>5、测试风险</p><p>6、测试对象评估</p><p><strong>测试结论</strong></p><p><strong>测试结果分析</strong></p><p>测试执行结束后，测试活动还没有结束，测试结果分析是必不可少的重要环节，“，全在收口”，测试结果的分析矿产资源下一轮测试工作的开展有很大的借鉴意义</p><p>因为通过对问题单的分析，总结不仅能发现不同人提交问题的类别与差异，还能发现自身思维的局限性，避免下轮测试进入自我盲区</p><p><strong>测试总结</strong></p><p>本轮次阶段性测试的系统测试用例通过率为xx.xx%，测试过程中发现新增问题缺陷为xx个，其中包含A级缺陷xx个，B级缺陷xx个，C级缺陷xx个，D级缺陷xx个</p><p>综上所述，经过该版本的测试过程分析，结合项目验收标准及其他需求综合分析，该版本符合验收标准，建议发布或者不发布，其他遗留问题在后续版本中继续优化修正等</p><h2 id="通用测试"><a href="#通用测试" class="headerlink" title="通用测试***"></a>通用测试***</h2><h2 id="测试策略的概念"><a href="#测试策略的概念" class="headerlink" title="测试策略的概念"></a>测试策略的概念</h2><p>在一定的软件测试的标准、测试规范的指导下，依据测试项目的特定环境的约束而规定的软件约束规定的软件测试原则、方式、方法的集合</p><h4 id="常规测试策略的种类"><a href="#常规测试策略的种类" class="headerlink" title="常规测试策略的种类"></a>常规测试策略的种类</h4><p>​    测试技术:黑盒、白盒、灰盒</p><p>​    测试阶段：单元测试、集成测试、系统测试、验收测试</p><p>​    执行过程：手工测试、自动化测试</p><p>​    状态：静态测试，动态测试</p><p>​    特性：功能、性能、冒烟、回归、兼容、安装、文档、界面、可靠性、稳定性。</p><h4 id="策略使用："><a href="#策略使用：" class="headerlink" title="策略使用："></a>策略使用：</h4><p><strong>常用应用于产品或者项目测试的计划或者方案中，给测试设计者提供测试方法或测试种类的选择。</strong></p><h3 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h3><h4 id="兼容性测试概述"><a href="#兼容性测试概述" class="headerlink" title="兼容性测试概述"></a>兼容性测试概述</h4><p>​        兼容性测试将验证软件与依赖的环境的依赖程度，包括对硬件的依赖程度，对平台软件、其他软件的依赖程度等。</p><h4 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h4><p>​    指进行测试所必需的服务器、客户端、网络连接设备，以及打印机、扫描仪等辅助硬件设备所构成的环境。</p><h4 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h4><p>​    指被测软件运行所需要的操作系统、数据、浏览器以及被测软件共存的其他应用软件等构成的环境。</p><h4 id="硬件兼容性的测试"><a href="#硬件兼容性的测试" class="headerlink" title="硬件兼容性的测试"></a>硬件兼容性的测试</h4><h5 id="硬件兼容性测试的目的"><a href="#硬件兼容性测试的目的" class="headerlink" title="硬件兼容性测试的目的"></a>硬件兼容性测试的目的</h5><p>​    所有软件都需要向用户说明其运行的硬件环境，对于多层结构的软件系统来说，需要分别说明其服务器端、客户端以及网络所需要的环境。兼容性测试的目的就是确认这些对于硬件环境的描述是否正确、合理。</p><h5 id="硬件兼容性测试需要确认以下几点："><a href="#硬件兼容性测试需要确认以下几点：" class="headerlink" title="硬件兼容性测试需要确认以下几点："></a>硬件兼容性测试需要确认以下几点：</h5><ol><li><p><strong>最低配置是否能够满足系统运行的需要。</strong></p><p>​    <strong>在最低配置下，所有的软件功能必须能够完整的实现，软件运行速度、响应的时间因该在用户能够忍受的范围内。</strong></p></li><li><p><strong>在推荐配置下系统的响应速度。</strong></p><p><strong>推荐速度配置必须合理。注意：一味的追求高配置，一方面可能掩盖软件的性能缺陷，另一方面会限制了软件的应用范围。</strong></p></li><li><p><strong>考察软件对运行硬件环境有无特殊说明，如对cpu、网卡、声卡、显卡型号的有无特殊声明。</strong></p></li><li><p><strong>避免有些软件在不同的硬件环境中出现不同的运行结果或是在某些环境下根本就不能执行。</strong></p></li><li><p><strong>为了满足不同的使用需求，软件系统能否运行在多种情况硬件配置环境下，并且系统和性能都能满足设计需求</strong></p></li><li><p><strong>为企业的硬件选型与部署提供了依据。</strong></p></li></ol><h4 id="与整机的兼容性"><a href="#与整机的兼容性" class="headerlink" title="与整机的兼容性"></a>与整机的兼容性</h4><p>​        整机兼容性测试将确认软件要求的最低配置的合理性和真确性，主要指标包括对机型的要求和对CPU、内存、硬盘的要求。</p><p>CPU</p><p>​    各类软件的最低配置和推荐配置都必须注明对cpu的要求，包括cpu类型和主频的要求。</p><p>内存</p><p>​    一般需要设计在不同内存容量下的测试</p><p>硬盘</p><p>​    主要对硬盘容量的测试</p><h4 id="与板卡及配件的兼容性"><a href="#与板卡及配件的兼容性" class="headerlink" title="与板卡及配件的兼容性"></a>与板卡及配件的兼容性</h4><p>​    对板卡及配件依赖较大的是操作系统和驱动程序。游戏软件对显卡、播放器对显卡和声卡的依赖等。</p><p>独立显卡</p><p>独立声卡</p><h5 id="打印机的兼容性"><a href="#打印机的兼容性" class="headerlink" title="打印机的兼容性"></a>打印机的兼容性</h5><p>​    对不同厂商、不同型号的打印机需要分别进行测试</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>​    软件运行所依赖的硬件设备，多应该进行兼容性测试。</p><p>扫描仪、光驱、摄像头……..</p><h3 id="软件的兼容性测试内容"><a href="#软件的兼容性测试内容" class="headerlink" title="软件的兼容性测试内容"></a>软件的兼容性测试内容</h3><h4 id="与操作系统的兼容性"><a href="#与操作系统的兼容性" class="headerlink" title="与操作系统的兼容性"></a>与操作系统的兼容性</h4><p>​        如果该软件承诺可以在多种操作系统上运行，就需要测试它与操作系统的兼容性，对于多层体系结构的软件，要分别考虑服务器和客户端的可选性。</p><p>​    操作系统兼容性的测试内容不仅包括安装，还需要对关键流程、功能进行检查。</p><h5 id="与其他软件的兼容性"><a href="#与其他软件的兼容性" class="headerlink" title="与其他软件的兼容性"></a><strong>与其他软件的兼容性</strong></h5><p>同类软件/不同类型的兼容性</p><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><h5 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h5><h5 id="数据兼容性测试"><a href="#数据兼容性测试" class="headerlink" title="数据兼容性测试"></a>数据兼容性测试</h5><p>​    数据兼容是指软件之间能否正确的的交互和共享信息。主要考虑：</p><p>​    被测试软件与其他程序间复制粘贴文字、图片、表格、带格式的文字等</p><p>​    新版本文件在就版本软件中是否能被打开；旧版本下保存的文件在新版本的软件中能否被打开；</p><p>与同类软件间能否进行数据交换，软件是否提供对其他常用数据格式的支持。</p><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><h3 id="安装测试包括以下测试方面"><a href="#安装测试包括以下测试方面" class="headerlink" title="安装测试包括以下测试方面"></a>安装测试包括以下测试方面</h3><p>​    <strong>安装测试、运行测试、卸载测试</strong></p><h4 id="安装测试-1"><a href="#安装测试-1" class="headerlink" title="安装测试"></a>安装测试</h4><ol><li><strong>关注各种不同安装形式（典型安装、最大安装、最小安装、自定义安装等）</strong></li><li><strong>安装某些软件前，如果需要首先安装其他支持软件，软件要自动检查需要的支持软件及其版本是否正确</strong></li><li><strong>安装前是否检查与安装软件相关的软件的是正在运行，是否提示关闭相关软件</strong></li><li><strong>安装过程中软件、硬件资源不足情况下，安装程序的处理</strong></li><li><strong>安装过程中是否检查安装了该软件的其他版本</strong></li><li><strong>安装过程中对用户输入的安装目录信息等是否进行检查</strong></li><li><strong>对用户输入的个人信息系等进行检查</strong></li><li><strong>安装界面上的文字描述，符合要求且语言通顺，无错别字</strong></li><li><strong>每个界面中的按钮（包括快捷键）是否可用（下一步、上一步、取消、帮助）</strong></li><li><strong>产品序列好的检查</strong></li></ol><h4 id="卸载测试"><a href="#卸载测试" class="headerlink" title="卸载测试"></a>卸载测试</h4><pre><code>1.  **所有的文件是否都被删除，包括安装时创建的目录文件、开始菜单、桌面快捷方式和快速启动图标都被删除** 2.  **在卸载过程中，卸载界面上的按钮功能是否多能实现** 3.  **每个窗口的界面测试** 4.  **卸载正在使用的程序**</code></pre><h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><h4 id="文档测试概述"><a href="#文档测试概述" class="headerlink" title="文档测试概述"></a>文档测试概述</h4><h5 id="文档测试-1"><a href="#文档测试-1" class="headerlink" title="文档测试"></a>文档测试</h5><p>​    软件是由程序与文档组成，文档是软件的重要组成部分，所以要对文档进行测试</p><h5 id="软件文档分类："><a href="#软件文档分类：" class="headerlink" title="软件文档分类："></a>软件文档分类：</h5><p>​    用户文档：用户手册、操作手册、维护修改建议</p><p>​    开发文档：可行性研究报告、软件需求说明书、数据库设计说明书、概要设计说明书、详细设计    说明书</p><p>​    测试文档：测试计划、测试用例、测试总结报告</p><p>​    管理文档：项目开发计划、开发进度月报、开发总结报告</p><h5 id="用户文档的内容"><a href="#用户文档的内容" class="headerlink" title="用户文档的内容"></a>用户文档的内容</h5><p>​    包装上的文字图案、标签；宣传材料、广告及其它插页；授权/注册登记表；最终用户设置手册；    用户手册     联机帮助    指南、向导       样例、实例</p><h5 id="用户文档测试的要点"><a href="#用户文档测试的要点" class="headerlink" title="用户文档测试的要点"></a>用户文档测试的要点</h5><p>​    读者群：初级用户、中级用户、高级用户</p><p>​    术语：标准，与业界规范一至</p><p>​    正确性：所有信息真实正确，另外标题、排版的正确性和错别字、标点符号的错误检查</p><p>​    完整性：内容全面、操作步骤完整</p><p>​    易用性：是否提供目标、索引，页面的布局合理、适当的图表</p><p>​    图表与界面截图：检查所有图表与界面截图是否与发行版本相同</p><p>​    样例与示例：像用户一样载入和使用样例</p><h1 id="APP测试"><a href="#APP测试" class="headerlink" title="APP测试"></a>APP测试</h1><p>APP测试概述:是指app应用程序的功能测试、性能测试等;功能测试包括app应用的所有功能是否可用,是否会出现bug的现象,性能测试就是用户使用流程是否顺畅,如支付流程,注册流程这些是否都顺畅以及app相应时间和app后台性能测试等。</p><h2 id="一、功能测试要点及常见缺陷"><a href="#一、功能测试要点及常见缺陷" class="headerlink" title="一、功能测试要点及常见缺陷"></a>一、功能测试要点及常见缺陷</h2><h3 id="常见功能类缺陷"><a href="#常见功能类缺陷" class="headerlink" title="常见功能类缺陷"></a>常见功能类缺陷</h3><h4 id="常见功能类缺陷-1"><a href="#常见功能类缺陷-1" class="headerlink" title="常见功能类缺陷"></a>常见功能类缺陷</h4><p>APP崩溃</p><p>这是个测试中常见问题，这样问题也是非常严重的，会直接影响用户对产品的第一印像，例如我们正在使用某个App，正在使用突然应用就停止响应，界面山弹出“强制关闭错误”的窗口，需要强制关闭应用，或者正在使用是出先闪退的现象，这些情况都很影响用户的体验，导致用户卸载该APP，通用的触发移动APP崩溃的测试场景，如下：</p><ol><li><p><strong>验证在有不同屏幕分辨率，操作系统和运营商的多个设备上的APP行为；</strong></p></li><li><p><strong>用新发布的操作系统版本验验证App的行为；</strong></p></li><li><p><strong>验证在如隧道，电梯等网络质量突然改变的环境中的APP行为；</strong></p></li><li><p><strong>更改网络：从蜂窝更改到WIFI,或反过来，验证APP行为；</strong></p></li><li><p><strong>验证没有网络的环境中的App行为</strong></p></li><li><p><strong>验证来电/短信和设备特定的警报（如警报和通知）是APP行为；</strong></p></li><li><p><strong>通过改变设备的方向，以不同的视图模式，验证APP行为；</strong></p></li><li><p><strong>验证设备内存不足时的APP行为；</strong></p></li><li><p><strong>通过测试工具施加载荷验证App行为</strong></p></li><li><p><strong>用不同的支持语言验证APP行为。</strong></p></li></ol><p>功能未实现会实现了部分</p><p>功能事项错误</p><h5 id="功能测试要点"><a href="#功能测试要点" class="headerlink" title="功能测试要点"></a><strong>功能测试要点</strong></h5><p>根据产品需求文档编写测试用例；</p><p>软件设计文档编写用例；</p><p>测试要求：保证输入数据正确，并且进行了正确的操作，明确的输出结果和数据值及格式。</p><h2 id="二、兼容性测试要点及常见的兼容性缺陷"><a href="#二、兼容性测试要点及常见的兼容性缺陷" class="headerlink" title="二、兼容性测试要点及常见的兼容性缺陷"></a>二、兼容性测试要点及常见的兼容性缺陷</h2><p>I0S系统常见版本有9、10、 11、 12等 ,硬件常见iPhone 6. iPhone7. iPhone 8、iPhone X. iPhone 11、iPhone Plus、iPad 系列;安卓常见的版本有7、8、9、10, 硬件更是数之不尽,不同的品牌,常见的如三星系列、华为感列、小米系列、PPO系列、VIVO系列等;测试APP在不同的机型上由于软件、硬件等不同而出现各种各样的问题, 这些都是缺陷聚集的地方,一个页面可能在安卓手机上显示正常，但可能在iPhone手机上显示错位,所以测试中尽量覆盖主流的手机型号和版本,如iPhone系列、三星系列、华为系列、小米系列、pp系列、vivo系列等 ,找出在这些主流手机上使用app出现的缺陷并修复。</p><h2 id="三、安装、卸载测试要点及常见缺陷"><a href="#三、安装、卸载测试要点及常见缺陷" class="headerlink" title="三、安装、卸载测试要点及常见缺陷"></a>三、安装、卸载测试要点及常见缺陷</h2><h4 id="常见的安装、卸载缺项"><a href="#常见的安装、卸载缺项" class="headerlink" title="常见的安装、卸载缺项"></a>常见的安装、卸载缺项</h4><ol><li><strong>安装过程中出现闪退；</strong></li><li><strong>安装完成后，点击APP无反应；</strong></li><li><strong>安装完成后，点击APP，APP出现闪退；</strong></li><li><strong>已经存在旧版本，但不卸载旧版本进行覆盖安装版本时，版本号是新版本的版本号，但APP的内容仍然是旧版本。</strong></li></ol><h4 id="安装、卸载测试要点"><a href="#安装、卸载测试要点" class="headerlink" title="安装、卸载测试要点"></a>安装、卸载测试要点</h4><p>安装测试很重要，用户使用APP的第一个动作就是APP安装，如果安装APP出了问题，会让用户直接放弃用该APP。测试中主要从以下方面进行测试：</p><ol><li><p><strong>应用是否可以在ios不同系统版本或Android不同系统版本上安装（有系统版本过低，应该不能适配）</strong></p></li><li><p><strong>软件安装后是否可以正常运行，安装后的文件夹及文件是否可以写到指定的目录里；</strong></p></li><li><p><strong>安装过程中是否可以取消，安装不足是否有相应提示；</strong></p></li><li><p><strong>检查安装包是否齐全，尤其DLL检查安装手册；</strong></p></li><li><p><strong>如果应用需要通过网络验证之类的安装，需要测试一下断网情况下是否有相应提示；</strong></p></li><li><p><strong>是否可以删除应用（可通过桌面删除，也可通过软件卸载安装，增发现在iOS手机上有个应用安装时未完全安装，终止安装后，未完成安装的应用图标一直显示在手机上，并且无法删除）；</strong></p></li><li><p><strong>测试卸载后文件是否全部删除所有的安装文件夹；</strong></p></li><li><p><strong>卸载过程中出现死机，断电，重启等意外情况，待环境恢复后是否可以正确卸载；</strong></p></li><li><p><strong>卸载是否支持取消功能，单击取消后软件卸载情况是否正常。</strong></p></li></ol><h4 id="软件更新测试点"><a href="#软件更新测试点" class="headerlink" title="软件更新测试点"></a>软件更新测试点</h4><ol><li><strong>当客户端有新版本时，有更新提示；</strong></li><li><strong>软件更新一定要测试，确保Androld软件更新可以正确更新版本，且安装正确；</strong></li><li><strong>确保iOS软件更新还有限制，正式版只有上了商店且有版本更新是才能测试；</strong></li><li><strong>用户取消版本更新时，老板本可以正常使用，但是下一次启动时，仍要出现更新提示；</strong></li><li><strong>当有新版本时，不能删客户端情况下，直接更新检查是否能正常更新，且更新后客户端的功能是否最新版本（正常来讲不用强制删除本地客户端可以正常更新）</strong></li><li><strong>出现跨版本跟新的时候可以更新成功。</strong></li></ol><h3 id="四、性能测试要点及常见缺陷"><a href="#四、性能测试要点及常见缺陷" class="headerlink" title="四、性能测试要点及常见缺陷"></a>四、性能测试要点及常见缺陷</h3><h4 id="常见的性能方面的缺陷"><a href="#常见的性能方面的缺陷" class="headerlink" title="常见的性能方面的缺陷"></a>常见的性能方面的缺陷</h4><ol><li><strong>加载时过长；</strong></li><li><strong>应用程序首次启动速度慢；</strong></li><li><strong>进入某个界面速度慢；</strong></li><li><strong>启动某一有动画效果的界面，动画执行过程不流畅，或者动画执行卡顿；</strong></li><li><strong>响应时长导致某一用户事先无响应；</strong></li><li><strong>应用长时间运行后，随机出现卡顿现象；</strong></li><li><strong>服务器无法响应，报HTTP500错误；</strong></li><li><strong>APP出现黑白屏</strong></li><li><strong>APP崩溃</strong></li></ol><h4 id="性能测试要点"><a href="#性能测试要点" class="headerlink" title="性能测试要点"></a>性能测试要点</h4><p>性能也是衡量APP质量的一个指标，如果加载时过长，响应时过长，用户没耐心等待，很有可能直接卸载APP。</p><ol><li><strong>APP的启动时长是否过长；</strong></li><li><strong>APP使用时对CPU、内存的消耗情况；</strong>、</li><li><strong>APP使用时crash的几率是否较多，可进行埋点分析测试；</strong></li><li><strong>app使用时，电量流量的使用；</strong></li><li><strong>反复长时间的操作下，系统该资源使用情况；</strong></li><li><strong>响应能力测试，验证各种情况下操作能否满足用户的响应请求。</strong></li></ol><h2 id="五、用户体验性测试及常见缺陷"><a href="#五、用户体验性测试及常见缺陷" class="headerlink" title="五、用户体验性测试及常见缺陷"></a>五、用户体验性测试及常见缺陷</h2><p>以主观的普通消费者的角度去感知产品或服务的舒适、有用、易用、友好亲切程度。通过不同个体、独立空间和非经验的统计复用方式去有效评价产品的体验特性,提出修改意见提升产品的潜在客户满意度。主要从易用性和友好性方面进行测试。<br>界面显示是否美观,界面的色彩、字体大小是否合适、布局是否美观,提示语是否友好;<br>按钮、对话框、列表和窗口等是否符合用户的使用习惯:<br>是否易于导航、导航是否直观、导航与页面结构、菜单、连接页面的风格是否一致。</p><h4 id="用户体验性的缺陷"><a href="#用户体验性的缺陷" class="headerlink" title="用户体验性的缺陷"></a>用户体验性的缺陷</h4><ol><li><p><strong>界面显示不美观、界面色彩用户使用不舒服、界面色彩和按钮、其他的编辑框等不搭调、图片和字体显示布局不美观（文字包围图片方面）、界面的字体不满足视力不好的用户、菜单层次太深、相关的选项离得太远、按钮不可点击（如果按钮处于不可用状态，一定要灰掉，或者拿掉按钮，否则会给用户误导）；</strong></p></li><li><p><strong>超长的页面加载时间，移动端的要求比较高，一般要求无等待间隔的加载，页面加载时间过长，会导致用户没耐心等待而弃用该APP；</strong></p></li><li><p><strong>页面排版过长，一般很少有浏览者有兴趣看页面中最下面的内容， 90%的用户，打开一个页面，只浏览第一屏的内容，就以为看到了全部，而不会向下滚动。一个过长的页面很容易引起浏览者的视觉疲劳；</strong></p></li><li><p><strong>不友好的导航，不友好的导航是最应向用户操作的，不能让用户很方便的找到自己想到的内容。用户来到一个页面不知如何返回上一页，不知道当前页面是在哪个栏目下的。这样很可能用户来了一次就不会再来了，这也是现在比较强调信息架构设计的原因，导航设计是信息架构中的一部分。用户每次都得用重新打开APP的方式来寻找内容的话，很难有用户会留存；</strong></p></li><li><p><strong>过期的信息，很久不更新的信息，很容易让浏览者感到反感，而且在心中也会对你这个产品的品牌形象大打折扣。过期的新闻，过期的促销信息、活动信息都是致命伤；</strong></p></li><li><p><strong>死链接或链接错误；</strong></p></li><li><p><strong>缺少互动的内容，缺少用户的参与,不能让用户表达情感和思想，注定这个产品只是个固步自封的产品。现在最基本的，都要提供的一个“意见反馈”的入口，以便产品的忠实用户发表看法，从而收集这部分反馈去改进产品。再者有互动的口子，也会让用户觉得产品是比较开放的；</strong></p></li><li><p><strong>恶意插件，恶意弹出窗口；</strong></p></li><li><p>提示语粗暴不友好。</p></li></ol><h2 id="六、交叉事件的测试要点及常见缺陷"><a href="#六、交叉事件的测试要点及常见缺陷" class="headerlink" title="六、交叉事件的测试要点及常见缺陷"></a>六、交叉事件的测试要点及常见缺陷</h2><h4 id="交叉事件主要测试要点"><a href="#交叉事件主要测试要点" class="headerlink" title="交叉事件主要测试要点"></a>交叉事件主要测试要点</h4><ol><li><strong>多个APP同时运行是否影响正常功能；</strong></li><li><strong>APP运行时前/后台是否影响正常功能；</strong></li><li><strong>APP运行时拨打/接听电话；</strong></li><li><strong>APP运行时发送/接收信息；</strong></li><li><strong>APP运行时发送/接收邮件；</strong></li><li><strong>APP运行时切换网络（2G、3G、4G、5G、wi-fi）；</strong></li><li><strong>APP运行时浏览网页；</strong></li><li><strong>APP运行时使用蓝牙传送/接收数据；</strong></li><li><strong>APP运行时使用相机、计算器等手机自带设备；</strong></li><li><strong>分屏功能，多个App在前台运行；</strong></li></ol><h2 id="七、用户界面测试要点及常见缺陷"><a href="#七、用户界面测试要点及常见缺陷" class="headerlink" title="七、用户界面测试要点及常见缺陷"></a>七、用户界面测试要点及常见缺陷</h2><h4 id="用户界面测试要点及常见缺陷"><a href="#用户界面测试要点及常见缺陷" class="headerlink" title="用户界面测试要点及常见缺陷"></a>用户界面测试要点及常见缺陷</h4><ol><li><p><strong>目的</strong><br>测试用户界面(如菜单、对话框、窗口和其它可规控件)布局、风格是否满足客户要求、文字是否正确、页面是否美观、文字、图片组合是否完美、操作是否友好等。<br>UI测试的目标是确保用户界面会通过测试对象的功能来为用户提供相应的访问或浏览功能。确保用户界面符合公司或行业的标准。包括用户友好性、人性化、易操作性测试。<br>用户界面类的缺陷</p></li><li><p><strong>不符合 UI 设计或与界面原型不一致</strong><br>如APP的某个功能的界面风格和整体界面风格不一致，或者和图片、文字、按钮等不协调，此类问题虽然不存在使用上的问题，但是用户感觉非常不好，也给用户留下该研发团队不专业或者产品粗制滥造等印象，用户也不会使用太久或者直接卸载。 </p></li><li><p><strong>界面显示不完全</strong><br>APP由于功能相对简单，但是又要给人直观印象，所以图片作为首选使用，尤其在首页进行产品展示或者重要信息传递媒介会经常使用，但是在实际测试过程中会出现页面加载不完善的情况，如：图片显示不完全，按钮显示错乱，请求新页面的内容成功返回后和原来的界面内容重叠、在编辑框输入内容过长,向服务器提交请求返回数据和其他内容重叠等。</p></li><li><p><strong>上拉刷新和下拉刷新时出现页面加载错误</strong><br>手机客户端，内容超过一页时，上拉加载更多内容，加载错误（容易出现数据重复，图片和文章不匹配，图片重复加载，文章标题和内容不一致等情况）</p></li></ol><h2 id="web测试"><a href="#web测试" class="headerlink" title="web测试"></a>web测试</h2><h3 id="测试要点"><a href="#测试要点" class="headerlink" title="测试要点"></a>测试要点</h3><h4 id="一、输入框测试要点"><a href="#一、输入框测试要点" class="headerlink" title="一、输入框测试要点"></a>一、输入框测试要点</h4><p>1、字符型输入框：</p><p>（1）字符型输入框：英文全角、英文半角、数字、空或者空格、特殊字符“~！@# ￥%……&amp;*？[]{}”特别要注意单引号和&amp;符号。禁止直接输入特殊字符时，使用“粘贴、拷贝”功能尝试输入。</p><p>（2）长度检查：最小长度、最大长度、最小长度-1、最大长度+1、输入超长字符比如把整个文章拷贝过去。 </p><p>（3）空格检查：输入的字符间有空格、字符前有空格、字符后有空格、字符前后有空格</p><p>​         空值     不输入</p><p>（4）多行文本框输入：允许回车换行、保存后再显示能够保存输入的格式、仅输入回车换行，检查能否正确保存（若能，检查保存结果，若不能，查看是否有正常 提示）、</p><p>（5）安全性检查：输入特殊字符串 </p><p>2、数值型输入框：</p><p>（1）边界值：最大值、最小值、最大值+1、最小值-1 </p><p>（2）位数：最小位数、最大位数、最小位数-1最大位数+1、输入超长值、输入整数 </p><p>（3）异常值、特殊字符：输入空白（NULL）、空格或”~!@#$%^&amp;*()_+{}|[]:“&lt;&gt;?;’,./?;:’-=等可能导致系统错误的字符、禁止直接输入特殊字符时，尝试使用粘贴拷贝查看是否能正常提交、word中的特殊功能，通过剪贴板拷贝到输入框，分页符，分节 符类似公式的上下标等、数值的特殊符号如∑，㏒，㏑，∏，+，-等、</p><p>输入负整数、负小数、分数、输入字母或汉字、小数（小数前0点舍去的情况，多个小数点的情况）、首位为0的数字如01、02、科学计数法是否支持1.0E2、全角数字与半角数字、数字与字母混合、16进制，8进制数值、货币型输入（允许小数点后面几位）、</p><p>（4）安全性检查：不能特殊字符串 </p><p>3、日期型输入框：</p><p>（1）合法性检查：(输入0日、1日、32日)、月输入[1、3、5、7、8、10、12]、日输入[31]、月输入[4、6、9、11]、日输入[30][31]、输入非闰年，月输入[2]，日期输入[28、29]、输入闰年，月输入[2]、日期输入[29、30]、月输入[0、1、12、13] </p><p>(2)异常值、特殊字符：输入空白或NULL、输入~！@#￥%……&amp;*（）{}[]等可能导致系统错误的字符</p><p>（3）安全性检查：不能直接输入，就copy</p><h3 id="三、添加、修改功能"><a href="#三、添加、修改功能" class="headerlink" title="三、添加、修改功能"></a>三、<strong>添加、修改功能</strong></h3><p>1、特殊键：</p><p>（1）是否支持Tab键</p><p>（2）是否支持回车键</p><p>2、提示信息：</p><p>（1）不符合要求的地方是否有错误提示</p><p>3、唯一性：</p><p>（1）字段唯一的，是否可以重复添加，添加后是否能修改为已存在的字段（字段包括区分大小写以及在输入的内容前后输入空格，保存后，数据是否真的插入到数据库中，注意保存后数据的正确性）</p><p>4、数据 正确性：</p><p>（1）对编辑页的每个编辑项进行修改，点击保存，是否可以保存成功，检查相关联的数据是否得到更新。</p><p>（2）进行必填项检查（即是否给出提示以及提 示后是否依然把数据存到数据库中；是否提示后出现页码错乱等）</p><p>（3）是否能够连续添加（针对特殊情况）</p><p>（4）在编辑的时候，注意编辑项的长度限制，有时在 添加的时候有，在编辑的时候却没有（注意要添加和修改规则是否一致）</p><p>（5）对于有图片上传功能的编辑框，若不上传图片，查看编辑页面时是否显示有默认的图 片，若上传图片，查看是否显示为上传图片</p><p>（6）修改后/增加数据后，特别要注意查询页面的数据是否及时更新，特别是在首页时要注意数据的更新。 </p><p>（7）提交数据时，连续多次点击，查看系统会不会连续增加几条相同的数据或报错。</p><p>（8）若结果列表中没有记录或者没选择某条记录，点击修改按钮，系统会抛 异常。</p><h3 id="四、删除功能"><a href="#四、删除功能" class="headerlink" title="四、删除功能"></a><strong>四、删除功能</strong></h3><p>1、特殊键：</p><p>（1）是否支持Tab键</p><p>（2）是否支持回车键</p><p>2、提示信息：</p><p>（1）不选择任何信息，直接点击删除按钮，是否有提示</p><p>（2）删除某条信息时，应该有确认提示</p><p>3、数据 实现：</p><p>（1）是否能连续删除多条数据</p><p>（2）当只有一条数据时，是否可以删除成功</p><p>（3）删除一条数据后，是否可以添加相同的数据</p><p>（4）如系统支持批量删除，注意删除的信息是否正确</p><p>（5）如有全选，注意是否把所有的数据删除</p><p>（6）删除数据时，要注意相应查询页面的数据是否及时更新</p><p>（7）如删除的数据与其他业务数据关联，要注意其关联性（如删除部门信息时，部门下游员工，则应该给出提示）</p><p>（8）如果结果列表中没有记录或没有选择任何一条记录，点击删除按钮系统会报错。</p><h3 id="五、注册、登陆模块"><a href="#五、注册、登陆模块" class="headerlink" title="五、注册、登陆模块"></a><strong>五、注册、登陆模块</strong></h3><p>1、注册功能：</p><p>（1）注册时，设置密码为特殊字符，检查登录时是否会报错</p><p>（2）注册成功后，页面应该以登陆状态跳转到首页或指定页面</p><p>（3）在注册信息中删除已输入的信息，检查是否可以注册成功</p><p>（4）注册时，密码复杂度校验</p><p>2、登陆 功能：</p><p>（1）输入正确的用户名和正确的密码</p><p>（2）输入正确的用户名和错误的密码</p><p>（3）输入错误的用户名和正确的密码</p><p>（4）输入错误的用户名和错误的密码</p><p>（5）不输入用户名和密码（或者均为空格）</p><p>（6）只输入用户名，密码为空</p><p>（7）用户名为空，只输入密码</p><p>（8）输入正确的用户名和密码，但是不区分大小写</p><p>（9）用户名和密码包括特殊字符</p><p>（9）用户名和密码输入超长值</p><p>（10）已删除的用户名和密码(或者过期的账户)</p><p>（11）登录时，当页面刷新或重新输入数据时，验证码是否更新</p><h3 id="六、上传文件测试"><a href="#六、上传文件测试" class="headerlink" title="六、上传文件测试"></a><strong>六、上传文件测试</strong></h3><p>1、功能 实现：</p><p>（1）文件类型正确、大小合适</p><p>（2）文件类型正确，大小不合适</p><p>（3）文件类型错误，大小合适</p><p>（4）文件类型和大小都合适，上传一个正在使用中的文件</p><p>（5）文件类型大小都合适，手动输入存在的文件地址来上传</p><p>（6）文件类型和大小都合适，输入不存在的文件地址来上传</p><p>（7）文件类型和大小都合适，输入文件名称来上传</p><p>（8）不选择文件直接点击上传，查看是否给出提示</p><p>（9）连续多次选择不同的文件，查看是否上传最后一次选择的文件</p><h3 id="七、查询结果列表"><a href="#七、查询结果列表" class="headerlink" title="七、查询结果列表"></a><strong>七、查询结果列表</strong></h3><p>1、功能 实现：</p><p>（1）列表、列宽是否合理</p><p>（2）列表数据太宽有没有提供横向滚动</p><p>（3）列表的列名有没有与内容对应</p><p>（4）列表的每列的列名是否描述的清晰</p><p>（5）列表是否把不必要的列都显示出来</p><p>（6）点击某列进行排序，是否会报错（点击查看每一页的排序是否正确）</p><p>（7）双击或单击某条信息，是否会报错</p><h3 id="八、返回键检查"><a href="#八、返回键检查" class="headerlink" title="八、返回键检查"></a><strong>八、返回键检查</strong></h3><p>1、一条已经成功提交的记录，返回后再提交，是否做了处理</p><p>2、检查多次使用返回键的情况，在有返回键的地方，返回到原来的页面多次，查看是否会出错</p><h3 id="九、回车键检查"><a href="#九、回车键检查" class="headerlink" title="九、回车键检查"></a><strong>九、回车键检查</strong></h3><p>1、在输入结果后，直接按回车键，看系统如何处理，是否会报错</p><h3 id="十、刷新键检查"><a href="#十、刷新键检查" class="headerlink" title="十、刷新键检查"></a><strong>十、刷新键检查</strong></h3><p>1、在Web系统中，使用刷新键，看系统如何处理，是否会报错</p><h3 id="十一、直接URL链接检查"><a href="#十一、直接URL链接检查" class="headerlink" title="十一、直接URL链接检查"></a><strong>十一、直接URL链接检查</strong></h3><p>1、在Web系统中，在地址栏直接输入各个功能页面的URL地址，看系统如何处理</p><h3 id="十二、其他"><a href="#十二、其他" class="headerlink" title="十二、其他"></a><strong>十二、其他</strong></h3><p>1、在测试时，与网络有关的步骤必须考虑到断网的情况</p><p>2、每个页面都有相应的Title</p><p>3、在测试的时候要考虑到页面出现滚动条时，滚动条上下滚动时，页面是否正常</p><p>4、URL不区分大小写</p><p>5、某个字段是唯一的，当多个用户并发点击产生该字段时，检查系统怎么处理</p><p>6、对于电子商务网站，当用户并发购买数量大于库存的数量时，系统如何处理</p><p>7、测试数据避免单纯输入“123”、“abc“之类的，让测试数据尽量接近实际</p><p>8、进行测试时，尽量不要只用超级管理员进行测试，用新建的用户进行测试。测试人员尽量不要使用同一个用户进行测试</p><p>9、做功能测试的时候，也要注意系统的性能（如PC操作的响应时间、内存使用情况）</p><h3 id="十三、界面和易用性测试"><a href="#十三、界面和易用性测试" class="headerlink" title="十三、界面和易用性测试"></a><strong>十三、界面和易用性测试</strong></h3><p>1、风格、样式、颜色是否协调</p><p>2、界面布局是否整齐、协调（保证全部显示出来的，尽量不要使用滚动条</p><p>3、界面操作、标题描述是否恰当（描述有歧义、注意是否有错别字）</p><h2 id="冒烟测试-1"><a href="#冒烟测试-1" class="headerlink" title="冒烟测试"></a>冒烟测试</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>​    指在对一个新版本进行系统大规模的测试之前，先验收一下软件的基本功能是否正常，是否具备可测性。</p><p><strong>测试结果分析：</strong></p><p>1、登录成功，说明功能正确，冒烟通过。有可测性，可进行相关的登录测试，</p><p>如：</p><p>（1）输入正确的电话号码和错误的验证码</p><p>（2）输入错误的电话号码和正确的验证码</p><p>（3）输入错误的电话号码和错误的验证码</p><p>（4）不输入电话号码和密码验证码（均为空格）</p><p>（5）只输入电话号码，验证码为空</p><p>（6）电话号码为空，只输入验证码</p><p>（7）输入正确的电话号码和验证码，但是不区分大小写</p><p>（8）电话号码和验证码包括特殊字符</p><p>（9）电话号码和验证码输入超长值</p><p>（10）已删除的电话号码和验证码</p><p>（11）登录时，当页面刷新或重新输入数据时，验证码是否更新</p><p>2、登录失败，说明功能不正确，冒烟不通过，无可测试性，版本直接打回。</p><h2 id="系统测试-1"><a href="#系统测试-1" class="headerlink" title="系统测试"></a>系统测试</h2><p>一般地，<strong>系统测试的主要内容包括</strong>：</p><p>·<strong>功能测试</strong>。即测试软件系统的功能是否正确，其依据是需求文档，如《产品需求规格说明书》。由于正确性是软件最重要的质量因素，所以功能测试必不可少。</p><p>·<strong>健壮性测试</strong>。即测试软件系统在异常情况下能否正常运行的能力。健壮性有两层含义：一是容错能力，二是恢复能力。</p><p>·<strong>性能测试</strong>。即测试软件系统处理事务的速度，一是为了检验性能是否符合需求，二是为了得到某些性能数据供人们参考（例如用于宣传）。</p><p>·<strong>用户界面测试</strong>。重点是测试软件系统的易用性和视觉效果等。</p><p>·<strong>安全性（security）测试</strong>。是指测试软件系统防止非法入侵的能力。“安全”是相对而言的，一般地，如果黑客为非法入侵花费的代价（考虑时间、费用、危险等因素）高于得到的好处，那么这样的系统可以认为是安全的。</p><p>·<strong>安装卸载测试</strong>。</p><p><strong>系统测试过程域产生的主要文档有：</strong></p><p>·《系统测试计划》</p><p>·《系统测试用例》</p><p>·《系统测试报告》</p><p>·《缺陷管理报告》</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.<strong>制定系统测试计划</strong></p><p>测试组长按照指定的模板起草《系统测试计划》。该计划主要包括：</p><p>·测试范围（内容）</p><p>·测试策略</p><p>·测试环境与辅助工具</p><p>·测试完成准则</p><p>·人员与任务表</p><p>2.<strong>设计系统测试用例</strong></p><p>·系统测试小组各成员依据《系统测试计划》和指定的模板，设计（撰写）《系统测试用例》。</p><p>·测试组长邀请开发人员和同行专家，对《系统测试用例》进行技术评审。该测试用例通过技术评审后，转向执行系统测试。</p><p><strong>3.执行系统测试</strong></p><p>系统测试小组各成员依据《系统测试计划》和《系统测试用例》执行系统测试。</p><p>用“缺陷管理]工具”来管理所发现的缺陷，并及时通报给开发人员。</p><p>将测试结果汇总记录在《系统测试报告》中</p><p><strong>缺陷管理与改错</strong></p><p>·从【Step1】至【Step3】，任何人发现软件系统中的缺陷时都必须使用指定的“缺陷管理工具”。该工具将记录所有缺陷的状态信息，并可以自动产生《缺陷管理报告》。</p><p>·开发人员及时消除已经发现的缺陷。</p><p>·开发人员消除缺陷之后应当马上进行回归测试，以确保不会引入新的缺陷。</p><h2 id="目标和原则"><a href="#目标和原则" class="headerlink" title="目标和原则"></a>目标和原则</h2><p>目标：</p><p>1、 确保系统测试的活动是按计划进行的；</p><p>2、 验证软件产品是否与系统需求，测试用例不相符合或与之矛盾；</p><p>3、 建立完善的系统测试缺陷记录跟踪库；</p><p>4、 确保软件系统测试活动及其结果及时通知相关小组和个人。</p><p>原则：</p><p>1、测试机构要独立；</p><p>2、要精心设计测试计划、测试用例，包括功能测试、负载测试、压力测试、用户界面测试、安装测试、验收测试；</p><p>3、要进行回归测试；</p><p>4、测试要遵从经济性原则。</p><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="osi七层-："><a href="#osi七层-：" class="headerlink" title="osi七层 ："></a>osi七层 ：</h3><p><strong>从低至高</strong>：<strong>物理层、数据连路层、网络层、传输层、会话层、表示层、应用层。</strong>么一层多是独立的。</p><p>​    开放系统互连参考模型（Open System Interconnect简称osi）是国际标准化组织（ISO）和国际电话咨询委员会（CCITT）联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结果的框架。</p><h3 id="网络分层原理-通信过程中数据和控制信息的传输"><a href="#网络分层原理-通信过程中数据和控制信息的传输" class="headerlink" title="网络分层原理-通信过程中数据和控制信息的传输"></a>网络分层原理-通信过程中数据和控制信息的传输</h3><p>在两台计算机系统之间传送文件是，必输完成以下特定任务：</p><ol><li><p>发展计算机告知网络接收机的标识号；</p></li><li><p>发送计算机必须确定接收机处于可接受数据收状态；</p></li><li><p>发送端文件传输应用程序必须确定接收端文件管理程序能够接收并存储相应的文件；</p></li><li><p>发送端和接收端能够完成格式转换功能；</p></li></ol><table><thead><tr><th>OSI参考模型</th><th>各层的理解</th><th>TCP/IP协议族</th></tr></thead><tbody><tr><td>应用层</td><td>为应用程序提供服务</td><td>TFTP,HTTP,FTP,<br>SMTP,DNS,Telnet</td></tr><tr><td>表示层</td><td>数据格式转化、数据加密</td><td>没有协议</td></tr><tr><td>会话层</td><td>建立、管理可维护会话</td><td>没有协议</td></tr><tr><td>传输层</td><td>建立、管理和维护端到端的链接</td><td>TCP,UDP</td></tr><tr><td>网络层</td><td>IP选址及路由选择</td><td>IP,ICMP,RIP,OSPF,<br >BGP,IGMP</td></tr><tr><td>数据连路层</td><td>提供介质访问和链路管理</td><td>SLIP,CSLIP,PPP,<BR >ARP,RARP,MTU</td></tr><tr><td>物理层</td><td>物理层</td><td>ISO2110,IEEE802,<be >IEEE802.2</td></tr></tbody></table><h4 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h4><ol><li><p>基本链接与无连接：</p><p>TCP是面向连接的协议，也就是说，在发数据前，必须和对方建立可靠的连接。而UDP是非连接的。</p></li><li><p>对系统资源的要求：（TCP较多，UDP少）;</p></li><li><p>UDP传输速度快，效率高，TCP传输速度慢，效率低；</p></li><li><p>TCP保证数据完整性、正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p></li></ol><h3 id="常用的协议及端口"><a href="#常用的协议及端口" class="headerlink" title="常用的协议及端口"></a>常用的协议及端口</h3><p>端口号的范围是从1<del>65535.其中1</del>1024是被RFC 3232规定好了的，被称作“众所周知的端口号”(Well Konwn Ports);从1025~65535的端口号被称为动态端口号(DynamicPorts),可用来建立以其他主机的会话，也可由用户自定义用途。以下是常见的端口号：</p><p>​        <strong>TCP 21端口 : FTP 文件传输服务</strong></p><p>​        <strong>TCP 22端口 : SSH 中断连接服务Linux</strong></p><p>​        <strong>TCP 23端口 :  TELNET 终端仿真服务</strong></p><p>​        <strong>TCP 25端口 : SMTP 简单邮件传输服务</strong></p><p>​        <strong>TCP 110端口 :   POP3”邮局协议版本3”使用的端口</strong></p><p>​        <strong>UDP 53端口 : DNS 域名解析服务</strong></p><p>​        <strong>TCP 80端口 :  HTTP 超文本传输服务</strong></p><p>​        <strong>TCP 443端口 : HTTPS 加密的超文本传输服务</strong></p><p>​        <strong>TCP 1521端口 : Oracle数据库服务</strong></p><p>​        <strong>TCP 1863端口 : MSN Messenger的文件传输功能所使用的端口</strong>    </p><p>​        <strong>TCP 3389端口 : Microsoft RDP 微软远程桌面使用端口</strong></p><p>​        <strong>TCP 5631端口 : Symantec pcAnywhere微软远程控制数据传输的使用端口</strong> </p><p>​        <strong>UDP 5632 端口：Symantec pcAnynywhere主控端扫描被控端口时的使用端口</strong></p><p>​    <strong>TCP 5000端口：MS SQL Server使用的端口</strong></p><p>​    <strong>UDP 8000端口：腾讯QQ</strong></p><h4 id="HTTP1-0和HTTP1-1的区别"><a href="#HTTP1-0和HTTP1-1的区别" class="headerlink" title="HTTP1.0和HTTP1.1的区别"></a>HTTP1.0和HTTP1.1的区别</h4><p>​         在HTTP1.0协议中，客户端与web服务器建立连接后，只能获得一个web资源。</p><p>​         HTTP1.1协议，允许客户端与web服务器建立连接后，在一个连接上获取多个web资源。</p><p>一个好多同学搞不清楚的问题：</p><p>​        一个web页面中，使用img标签引用了三幅图片，当客户端访问服务器中的这个web页面时，客户端总共会访问几次服务器，即向服务器发送了几次HTTP请求。</p><h5 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h5><p>用于HTTP请求中的常用头</p><p>​    Accept:text/html,image/*  –支持数据类型</p><p>​    Accept-Charset:ISO-8859-1   –字符集</p><p>​    Accept-Encoding:gzip  –支持压缩</p><p>​    Accept-Language:zh-ch  –语言环境</p><p>​    Host:<a href="http://www.itcast.com:80" target="_blank" rel="noopener">www.itcast.com:80</a>  –访问主机</p><p>​    If-Modifled-Since:Tue,11 Jul 2018 18:23:51 GMT  –资源缓存时间（缓存到本地，如果更新了，则直接从服务器拿去最新的，缓存时间也要相应改变。）</p><p>Referer:<a href="http://www.itcast.com/index.jsp" target="_blank" rel="noopener">http://www.itcast.com/index.jsp</a> –来自那个页面、防盗链</p><p>User-Agent:Mozilla/40(compatible;MSIE5.5;Windows NT5.0)</p><p>Cookie</p><p>Connection:close/Keep-Alice –链接转态</p><p>Date；Tue,11 Jul 2000 18:23:51 GMT –时间</p><h5 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h5><p>格式：HTTP版本号 状态码 原因叙述</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100~199</td><td>表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程</td></tr><tr><td>200~299</td><td>表示成功接收请求并完成整个处理过程，常用200</td></tr><tr><td>300-399</td><td>为完成请求，客户端进一步细化请求。例如，请求的资源已经移动一个新地址，常用302、307(临时重定向)和304(地址来发生改变)</td></tr><tr><td>400~499</td><td>客户端请求有误，常用404</td></tr><tr><td>500~599</td><td>服务端出现错误，常用500</td></tr></tbody></table><p><strong>常见状态码：</strong></p><p><strong>200：代表这个请求是OK的，服务器也返回了</strong></p><p><strong>302：把这个请求重定向到别的地方了；数据临时被服务器搬到别的地方，需要从别的服务器进行处理。</strong></p><p><strong>400：代表客户端发送的请求有语法错误，客户端请求不能被服务器理解</strong></p><p><strong>401：身份认证错误，访问页面没有授权。</strong></p><p><strong>403：表示没有权限访问这个页面，禁止访问。</strong></p><p><strong>404：访问的资源不存在，代表没有这个页面。</strong></p><p><strong>500：服务器内部错误。</strong></p><p><strong>501：请求的功能目前没有实现。</strong></p><p><strong>502：网关处理错误。</strong></p><p><strong>503：服务器暂时无法处理</strong></p><p><strong>504：代表服务器端超时，没有响应。</strong></p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>​          Cookies是一种能够让网站服务器把少量数据储存到客户端的硬盘或内存，或是从客户端的硬盘读取数据的一种技术。Cookies是当你浏览某网站时，由Web服务器置于你硬盘上的一个非常小的文本文件，它可以记录你的用户ID、密码、浏览过的网页、停留的时间等信息。</p><p>​        当你再次来到该网站时，网站通过读取Cookies，得知你的相关信息，就可以做出相应的动作，如在页面显示欢迎你的标语，或者让你不用输入ID、密码就直接登录等等</p><p>​        当你浏览网页时，会有一些推送消息，大多数是你最近留意过的同类东西，比如你想买桌子，上淘宝搜了一下，结果连着几天会有各种各样的桌子的链接。这是因为你浏览某个网页的时候，WEB服务器会先送一些资料放在你的计算机上，类似于你打的文字，选的一些东西什么的，Cookie会帮你都纪录下来。当下次你再光临同一个网站，WEB服务器会先看看有没有它上次留下的Cookie 资料，有的话，就会依据Cookie里的内容来判断使用者，送出特定的网页内容给你。</p><p>​        Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用Cookie来辨认使用者，以方便送出使用者量身定做的内容。</p><p>​         Cookies文件是在无声无息中伴随浏览器进入我们本地硬盘的，当我们浏览某个站点时，该站点很可能将记录我们隐私的cookies文件保存到本地硬盘。</p><h5 id="怎么查看cookies-？"><a href="#怎么查看cookies-？" class="headerlink" title="怎么查看cookies ？"></a>怎么查看cookies ？</h5><ol><li>打开浏览器，按f12打开开发者工具，点击application选项；</li><li>点击左侧的cookie选项，展开cookie选项的二级内容；</li><li>选择某个地址，就可以在右侧看到cookie值了。</li></ol><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>​        首先大家知道，http协议是无状态的，即你连续访问某个网页100次和访问1次对服务器来说是没有区别对待的，因为它记不住你。 </p><p>　　那么，在一些场合，确实需要服务器记住当前用户怎么办？比如用户登录邮箱后，接下来要收邮件、写邮件，总不能每次操作都让用户输入用户名和密码吧，为了解决这个问题，session的方案就被提了出来，事实上它并不是什么新技术，而且也不能脱离http协议以及任何现有的web技术。 </p><p>　　原理很简单，假设你访问网页时就像逛澡堂，第一次进去你是没有钥匙的，这个时候你交了钱服务台就分配一把钥匙给你，你走到哪里都要带上，因为这是你身份的唯一标识，接下来你用这把钥匙可以去打开一个专有的储物柜存储你的衣物，游完泳，你再用钥匙去打开柜子拿出衣物，最后离开游泳池时，把钥匙归还，你的这次游泳的过程就是一次session，或者叫做会话，在这个例子中，钥匙就是session的key，而储物柜可以理解为存储用户会话信息的介质。 </p><p>​         那么在web server中如何实现session呢？想必看了上面的例子你会很容易理解，主要是解决两个问题，一个是钥匙的问题，一个是存储用户信息的问题。对于第一个问题，即什么东西可以让你每次请求都会自动带到服务器呢？如果你比较了解http协议，那么答案一目了然，就是cookie，如果你想为用户建立一次会话，可以在用户授权成功时给他一个cookie，叫做会话id，它当然是唯一的，比如PHP就会为建立会话的用户默认set一个名为phpsessid，值看起来为一个随机字符串的cookie，如果下次发现用户带了这个cookie，服务器就知道，哎呀，刚刚这位顾客来了。 </p><p>　　剩下的是解决第二个问题，即如何存储用户的信息，服务器知道会话id为abc的用户来了，那abc想存储自己的私人信息，比如购物车信息，如何处理？这个时候可以用内存、也可以用文件，也可以用数据库了，但有个要求是，数据需要用用户的会话id即可取到，比如php就默认会把会话id为abc的用户会话数据存储到/tmp/phpsess_abc【1】的文件里面，每次读取都要反序列化程序可以理解的数据，写的时候又需要序列化为持久的数据格式。</p><h3 id="session和cookie的区别"><a href="#session和cookie的区别" class="headerlink" title="session和cookie的区别"></a>session和cookie的区别</h3><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</p><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p><p>5、可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2020/07/04/%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/04/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的层次"><a href="#计算机的层次" class="headerlink" title="计算机的层次"></a>计算机的层次</h2><p>​        为了更好的理解计算机把计算机分为三个层次：</p><p>​        计算机硬件/裸机—操作系统—应用软件</p><h2 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h2><p>​        <strong>软件  =  程序 + 数据 + 文档</strong></p><h2 id="什么是软件缺陷？"><a href="#什么是软件缺陷？" class="headerlink" title="什么是软件缺陷？"></a>什么是软件缺陷？</h2><h3 id="软件缺陷的定义-一："><a href="#软件缺陷的定义-一：" class="headerlink" title="软件缺陷的定义 一："></a>软件缺陷的定义 一：</h3><p>​    只要满足下列规则之一则称之为发生了一个软件缺陷：</p><p>​    1.软件未实现产品说明书需求的功能</p><p>​    2.软件出现了产品说明书指明不应该出现的功能</p><p>​    3.实现了产品说明书未提及的功能</p><p>​    4.软件未来实现产品说明书虽未明确提及但应该有的功能</p><p>​    5.软件难以理解、不易使运算缓慢、或者从测试员的角度看，最终用户认为不好。</p><h3 id="软件缺陷的定义-二："><a href="#软件缺陷的定义-二：" class="headerlink" title="软件缺陷的定义 二："></a>软件缺陷的定义 二：</h3><p>​    美国电气和电子工程师协会（EEE）对缺项的定义：</p><p>​    从产品内部看：缺陷是软件产品开发或维护过程中存在的错误、毛病的各种问题。从产品外部看：缺陷是系统所需要实现的某种功能的实效或违规背。</p><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><p>​        在现有的软件中寻找缺项的过程</p><p><strong>测试的目的</strong>：</p><p>​    1.发现隐藏在软件中的错误缺陷，并将齐修复。</p><p>​    2.最大程序的满足软件中的错误或缺陷，并将其修复</p><p>​    3.提升软件的质量</p><p><strong>测试的对象</strong>：</p><p>​    需求文档    概要设计    详细设计    <strong>程序</strong>    <strong>数据</strong>    用户文档等</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>​    主要针对给用户使用的功能</p><h4 id="黑盒测试中常用方法"><a href="#黑盒测试中常用方法" class="headerlink" title="黑盒测试中常用方法"></a>黑盒测试中常用方法</h4><ul><li><strong>等价类划分法</strong></li><li><strong>边界值分析法</strong></li><li>因果图法</li><li>决策法</li><li><strong>错误推测法</strong></li><li>正交实验法</li><li><strong>场景法</strong></li><li>等</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>​    针对结构的测试        </p><p>​    程序员测试、结构测试、逻辑驱动测试</p><h3 id="黑盒测试与白盒测试的区别"><a href="#黑盒测试与白盒测试的区别" class="headerlink" title="黑盒测试与白盒测试的区别"></a>黑盒测试与白盒测试的区别</h3><table><thead><tr><th></th><th>黑盒测试</th><th align="center">白盒测试</th></tr></thead><tbody><tr><td>规划方面</td><td>针对功能测试</td><td align="center">针对结构测试</td></tr><tr><td>优势方面</td><td>能确保从用户使用角度出发进行测试</td><td align="center">能够对程序内部的特征部位进行覆盖测试</td></tr><tr><td>应用举例</td><td>等价划分  边界值分析法  因果图法  状态图测试法</td><td align="center">语句覆盖、判断覆盖、条件覆盖、判断/条件覆盖、基本路径覆盖、循环覆盖、模块接口测试</td></tr></tbody></table><h3 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h3><p>​    介于白盒测试与黑盒测试之间的测试。</p><p>​    结合了白盒测试盒黑盒测试的要素。灰盒测试关注输出对于输入的正确性；同时也关注内部表现，但这种关注不像白盒测试那样详细、完整，只是通过一些表征的现象，事件、标志来判断内部的运行状态。</p><h3 id="按是否需要运行代码（转态）划分"><a href="#按是否需要运行代码（转态）划分" class="headerlink" title="按是否需要运行代码（转态）划分"></a>按是否需要运行代码（转态）划分</h3><h4 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h4><p>静态测试是指不实际运行被测试软件，而只是静态检查程序代码、界面或者文档中可能存在的错误。</p><p>静态测试技术又称为静态分析技术，实际上对软件中的需求说明书、设计说明书、程序源代码的进行非运行的检查。</p><p>静态测试包括：代码测试（代码查找）、界面测试、文档测试等</p><blockquote><p>代码测试，主要测试是否符合相应的的标准和规范。</p><p>界面测试，主要测试软件的实际界面与需求中说明是否相符。</p><p>文档测试，主要测试用户手册和需求说明是否真正符合用户的实际需求。</p></blockquote><h4 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h4><p>​    动态测试是指通过人工或使用工具运行的程序进行检查、分析程序的执行状态和程序的外部表现</p><p>​    实际运行被测程序，输入相应的测试数据，检查实际输出结果和预期结果是否相符</p><h3 id="安软件特性分类"><a href="#安软件特性分类" class="headerlink" title="安软件特性分类"></a>安软件特性分类</h3><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><h4 id="反测"><a href="#反测" class="headerlink" title="反测"></a>反测</h4><h4 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h4><h4 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文案</title>
      <link href="/2020/06/08/%E6%96%87%E6%A1%88/"/>
      <url>/2020/06/08/%E6%96%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="山君文案"><a href="#山君文案" class="headerlink" title="山君文案"></a>山君文案</h1><h2 id="村上春树语录"><a href="#村上春树语录" class="headerlink" title="村上春树语录"></a>村上春树语录</h2><ul><li><p>你要做一一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另<br>外的生活。你要听话，不是所有的鱼都会生活在同一片海里。—《舞!舞!舞!》</p></li><li><p>哪里会有人喜欢孤独，不过是不喜欢失望罢了。—《挪威的森林》</p></li><li><p>失去理智的人怀抱的美好的幻想，在现实世界中根本是子虚乌有。—《当我谈跑步时我谈些什么》</p></li><li><p>如果你掉进了黑暗里，你能做的，不过是静心等待,直到你的双眼适应黑暗。—《挪威的森林》</p></li><li><p>世上存在着不能流泪的悲哀，这种悲哀无法向人解释，即使解释人家也不会理解。它永远一成不变，如无风夜晚的雪花静静沉积在心底。-《世界尽头与冷酷仙境》</p></li><li><p>少年时我们追求激情，成熟后却迷恋平庸，在我们寻找，伤害，背离之后，还能一-如既往的相信爱情，这是-种勇气。每个人都有属于自己的一片森林，迷失的人迷失了，相逢的人会再相逢。—《挪威的森林》</p></li><li><p>不必太纠结于当下，也不必太忧虑未来，当你经历过-些事情的时候，眼前的风景已经和从前不一样了。—《1Q84》</p></li><li><p>任凭怎么解释，世人也只能相信自己愿意相信的事情。越是拼命挣扎，我们的处境越是狼狈。—《挪威的森林》</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 摘要 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于站长</title>
      <link href="/2020/06/07/%E5%85%B3%E4%BA%8E%E7%AB%99%E9%95%BF/"/>
      <url>/2020/06/07/%E5%85%B3%E4%BA%8E%E7%AB%99%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="站长个人信息"><a href="#站长个人信息" class="headerlink" title="站长个人信息"></a>站长个人信息</h1><h2 id="这里只是简单的写点自我介绍"><a href="#这里只是简单的写点自我介绍" class="headerlink" title="这里只是简单的写点自我介绍"></a>这里只是简单的写点自我介绍</h2><ul><li>一个初入江湖的小菜鸟</li><li>所学专业：目前专科应届毕业生软件技术</li><li>工作经验：</li><li>特长：武术</li><li>爱好：短视频制作、运动、音乐、电竞。</li><li>喜欢的音乐:《下山》、《桥边姑娘》、《少年》等热歌榜歌曲。</li><li>喜欢的武术：梅花拳、八卦、形意、太极。</li><li>喜欢的动画影视剧：《师父》、《斗罗大陆》、《犬夜叉》、《侠肝义胆沈剑心》、《秦时明月》、《胡歌系列》等。</li><li>喜欢的音乐人：张杰、邓紫棋、陈奕迅、周杰伦等。</li><li>喜欢的书籍：杜子建老师抖音商柜推荐的书籍。</li><li>理想的生活：不“畏”柴米油盐贵！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
