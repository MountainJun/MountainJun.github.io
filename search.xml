<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔记第一阶段</title>
      <link href="/2020/07/10/%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"/>
      <url>/2020/07/10/%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的层次"><a href="#计算机的层次" class="headerlink" title="计算机的层次"></a>计算机的层次</h2><p>​        为了更好的理解计算机把计算机分为三个层次：</p><p>​        计算机硬件/裸机—操作系统—应用软件</p><h2 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h2><p>​        <strong>软件  =  程序 + 数据 + 文档</strong></p><h2 id="什么是软件缺陷？"><a href="#什么是软件缺陷？" class="headerlink" title="什么是软件缺陷？"></a>什么是软件缺陷？</h2><h3 id="软件缺陷的定义-一："><a href="#软件缺陷的定义-一：" class="headerlink" title="软件缺陷的定义 一："></a>软件缺陷的定义 一：</h3><p>​    只要满足下列规则之一则称之为发生了一个软件缺陷：</p><p>​    1.软件未实现产品说明书需求的功能</p><p>​    2.软件出现了产品说明书指明不应该出现的功能</p><p>​    3.实现了产品说明书未提及的功能</p><p>​    4.软件未来实现产品说明书虽未明确提及但应该有的功能</p><p>​    5.软件难以理解、不易使运算缓慢、或者从测试员的角度看，最终用户认为不好。</p><h3 id="软件缺陷的定义-二："><a href="#软件缺陷的定义-二：" class="headerlink" title="软件缺陷的定义 二："></a>软件缺陷的定义 二：</h3><p>​    美国电气和电子工程师协会（EEE）对缺项的定义：</p><p>​    从产品内部看：缺陷是软件产品开发或维护过程中存在的错误、毛病的各种问题。从产品外部看：缺陷是系统所需要实现的某种功能的实效或违规背。</p><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><p>​        在现有的软件中寻找缺项的过程</p><p><strong>测试的目的</strong>：</p><p>​    1.发现隐藏在软件中的错误缺陷，并将齐修复。</p><p>​    2.最大程序的满足软件中的错误或缺陷，并将其修复</p><p>​    3.提升软件的质量</p><p><strong>测试的对象</strong>：</p><p>​    需求文档    概要设计    详细设计    <strong>程序</strong>    <strong>数据</strong>    用户文档等</p><h4 id="测试流程："><a href="#测试流程：" class="headerlink" title="测试流程："></a><strong>测试流程：</strong></h4><p>需求分析—编写测试计划—编写测试方案，进行测试设计—编写测试用例—测试用例评审—修改完善测试用例—搭建测试环境—执行测试，提交BUG—更新测试环境—回归测试—编写测试报告</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>​    主要针对给用户使用的功能</p><h4 id="黑盒测试中常用方法"><a href="#黑盒测试中常用方法" class="headerlink" title="黑盒测试中常用方法"></a>黑盒测试中常用方法</h4><ul><li><p><strong>等价类划分法</strong></p><p> 在等价范围中：发现BUG的效果一样。</p><p>  分：有效/无效等价类（根据需求文档判定）</p><pre><code>有效：符合需求文档的合格软件测试输入数据的集合 </code></pre><p>​        无效：不符合需求文档的无意义的软件测试数据集合</p></li></ul><ul><li><p><strong>边界值分析法</strong></p><p>边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。 通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。 长期的测试工作经验告诉我们，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。</p></li><li><p>因果图法</p><p>利用因果图生成测试用例一般要经过以下几个步骤：</p><p>（1）分析软件规格说明描述中, 明确哪些是原因(即输入条件或输入条件的等价类)和哪些是结果(即输出条件)，并给每个原因和结果赋予一个标识符。</p><p>（2）分析软件规格说明描述中的语义，找出原因与结果之间,，原因与原因之间对应的关系，根据这些关系，画出因果图。</p><p>（3）由于语法或环境限制, 有些原因与原因之间,原因与结果之间的组合情况不可能出现，为表明这些特殊情况, 在因果图上用一些记号表明约束或限制条件。</p><p>（4）把因果图转换为判定表。</p><p>（5）把判定表的每一列拿出来作为测试依据，完成测试用例设计。</p></li><li><p>决策法</p></li><li><p><strong>错误推测法</strong></p></li><li><p>正交实验法</p><p>​    应用场景：在一个界面中有多个控件，每个控件有多个取值，控件之间可以相互组    合，不可能（也没有必要）为每一种组合编写一条用例，如何使用最少最优的组合    进行测试。——正交排列法</p><p>​    判定表，因果图也是考虑控件组合，但是组合数量较少（一般不会超过20中）</p></li><li><p><strong>场景法</strong></p><p>​    场景法是通过运用场景来对系统的功能点或业务流程的描述，从而提高测试效果的一种方法。</p><p>场景法一般包含基本流和备用流，从一个流程开始，通过描述经过的路径来确定的过程，经过遍历所有的基本流和备用流来完成整个场景。场景主要包括4种主要的类型：正常的用例场景，备选的用例场景，异常的用例场景，假定推测的场景。</p><p><strong>基本流</strong></p><p>![0_1324978502TCZh](C:\Users\47260\Pictures\Saved Pictures\0_1324978502TCZh.gif)</p></li></ul><ul><li>等</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>​    针对结构的测试        </p><p>​    程序员测试、结构测试、逻辑驱动测试</p><h3 id="黑盒测试与白盒测试的区别"><a href="#黑盒测试与白盒测试的区别" class="headerlink" title="黑盒测试与白盒测试的区别"></a>黑盒测试与白盒测试的区别</h3><table><thead><tr><th></th><th>黑盒测试</th><th align="center">白盒测试</th></tr></thead><tbody><tr><td>规划方面</td><td>针对功能测试</td><td align="center">针对结构测试</td></tr><tr><td>优势方面</td><td>能确保从用户使用角度出发进行测试</td><td align="center">能够对程序内部的特征部位进行覆盖测试</td></tr><tr><td>应用举例</td><td>等价划分  边界值分析法  因果图法  状态图测试法</td><td align="center">语句覆盖、判断覆盖、条件覆盖、判断/条件覆盖、基本路径覆盖、循环覆盖、模块接口测试</td></tr></tbody></table><h3 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h3><p>​    介于白盒测试与黑盒测试之间的测试。</p><p>​    结合了白盒测试盒黑盒测试的要素。灰盒测试关注输出对于输入的正确性；同时也关注内部表现，但这种关注不像白盒测试那样详细、完整，只是通过一些表征的现象，事件、标志来判断内部的运行状态。</p><h3 id="按是否需要运行代码（转态）划分"><a href="#按是否需要运行代码（转态）划分" class="headerlink" title="按是否需要运行代码（转态）划分"></a>按是否需要运行代码（转态）划分</h3><h4 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h4><p>静态测试是指不实际运行被测试软件，而只是静态检查程序代码、界面或者文档中可能存在的错误。</p><p>静态测试技术又称为静态分析技术，实际上对软件中的需求说明书、设计说明书、程序源代码的进行非运行的检查。</p><p>静态测试包括：代码测试（代码查找）、界面测试、文档测试等</p><blockquote><p>代码测试，主要测试是否符合相应的的标准和规范。</p><p>界面测试，主要测试软件的实际界面与需求中说明是否相符。</p><p>文档测试，主要测试用户手册和需求说明是否真正符合用户的实际需求。</p></blockquote><h4 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h4><p>​    动态测试是指通过人工或使用工具运行的程序进行检查、分析程序的执行状态和程序的外部表现</p><p>​    实际运行被测程序，输入相应的测试数据，检查实际输出结果和预期结果是否相符</p><h3 id="安软件特性分类"><a href="#安软件特性分类" class="headerlink" title="安软件特性分类"></a>安软件特性分类</h3><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><h4 id="反测"><a href="#反测" class="headerlink" title="反测"></a>反测</h4><h4 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h4><h4 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h4><h2 id="软件开发与测试流程"><a href="#软件开发与测试流程" class="headerlink" title="软件开发与测试流程"></a>软件开发与测试流程</h2><h3 id="1、软件开发阶段划分"><a href="#1、软件开发阶段划分" class="headerlink" title="1、软件开发阶段划分"></a>1、软件开发阶段划分</h3><h4 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h4><blockquote><p>​        根据客户的要求,清楚了解客户需求中的产品功能、性能、界面和具体规格等,        然    后进行分析,确定软件产品所要达到的目标。</p><p>​        需求规格说明书</p></blockquote><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><pre><code>系统分析员审查软件计划、软件需求分析提供的文档。提出候选的最佳推荐方案,    确定模块结构,划分功能模块，将软件功能需求分配给所划分的最小单元模块，确定模块间的联系,确定数据结构、文件结构、数据库模式等。    概要设计说明</code></pre><h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><pre><code>为每一个模块确定使用的算法,并用适当的工具(如流程图)表达算法的过程,写出模块的详细过程性描述;确定每个模块使用的数据结构;确定模块接口的细节,包括用户界面、数据输入输出等全部细节。详细设计说明书</code></pre><p>​    </p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>​        通过某种语言编写程序</p><h3 id="软件测试阶段划分"><a href="#软件测试阶段划分" class="headerlink" title="软件测试阶段划分"></a>软件测试阶段划分</h3><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><blockquote><p>​    单元测试又称模块测试，是针对软件设计最小单位—程序模块运行正确性检验的    测试工作类、文件、窗口、函数、菜单、报表或一个存储过程可以作为个单元进    行测试</p></blockquote><p>​    单元测试以白盒测试为主</p><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><blockquote><p>​    也叫做组装测试，通常在单元测试的基础上，将所有，模块进行有序的、递增的    测试</p></blockquote><h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><blockquote><p>​    系统测试是在真实或模拟系统运行环境下，检查完整的程序系统能否和系统（包    括插件、外键、网络和系统软件、支持平台等）正确匹配、链接，并满足用户要    求。</p><p>​    系统测试是为了验证和确认系统是否达到其原始目标，而对集成测试的硬件和软    件系统进行测试</p></blockquote><h4 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h4><h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><blockquote><p>​    按照项目任务书或合同、需双方约定的验收依据文档进行对整个系统的测试与审，    决定是否接收或拒收项目</p><p>​    以用户为主的测试，软件开发的质量保证员也参与。</p></blockquote><h3 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h3><h5 id="1-软件的状态：软件运行到某个时刻所处的情况"><a href="#1-软件的状态：软件运行到某个时刻所处的情况" class="headerlink" title="1.软件的状态：软件运行到某个时刻所处的情况"></a>1.软件的状态：软件运行到某个时刻所处的情况</h5><h5 id="2-输入的动作：用户向软件进行的操作"><a href="#2-输入的动作：用户向软件进行的操作" class="headerlink" title="2.输入的动作：用户向软件进行的操作"></a>2.输入的动作：用户向软件进行的操作</h5><h4 id="状态图转换概念"><a href="#状态图转换概念" class="headerlink" title="状态图转换概念"></a>状态图转换概念</h4><blockquote><p>​    找出软件所有的状态以及导致这些状态发生变化所输入动作，进行图形的方法把相    关联的输入动作和状态联系在一起，真实模拟用户的操作顺序进行设计测试用例。</p></blockquote><h5 id="状态转换图的核心："><a href="#状态转换图的核心：" class="headerlink" title="状态转换图的核心："></a>状态转换图的核心：</h5><blockquote><p>​    （1）软件所有状态</p><p>​    （2）导致状态发生变化的所有输入动作</p></blockquote><h4 id="使用状态转换图法的步骤"><a href="#使用状态转换图法的步骤" class="headerlink" title="使用状态转换图法的步骤"></a>使用状态转换图法的步骤</h4><blockquote><p>​    <strong>1.找出程序的所有输入动作，进行编程</strong></p><p>​        列出用户能够向软件输入的每一个动作，并进行编号</p><p>​    <strong>2.找出程序的所有状态</strong></p><p>​        可以认为用户每输入一个动作就会使程序的状态发生变化</p><p>​        如果不能决定是否为一个独立状态，可以先假设‘是’</p><p>​    <strong>3.找出什么动作会导致什么样的状态发生，画出状态图（一般情况下这是一        个反复的        过程）</strong></p><p>​    <strong>4.把相关联的动作和状态联系起来，设计成测试用例</strong></p></blockquote><h2 id="软件缺陷和缺陷报告"><a href="#软件缺陷和缺陷报告" class="headerlink" title="软件缺陷和缺陷报告"></a>软件缺陷和缺陷报告</h2><h3 id="测试人员的主要工作职责"><a href="#测试人员的主要工作职责" class="headerlink" title="测试人员的主要工作职责"></a>测试人员的主要工作职责</h3><pre><code>1.  编写测试计划 2.  编写测试方案 3.  编写测试用例 4.  执行测试，提交缺陷报告 5.  编写测试总结报告</code></pre><h3 id="编写缺陷报告"><a href="#编写缺陷报告" class="headerlink" title="编写缺陷报告"></a>编写缺陷报告</h3><h4 id="缺陷报告"><a href="#缺陷报告" class="headerlink" title="缺陷报告"></a>缺陷报告</h4><p>​    当测试人员发现了一个缺陷，需要填写一份“缺陷报告”来记录这个缺陷，并且通过这    个缺陷报告告知开发人员所发生的问题–缺陷报告是测试人员可开发交流沟通的工    具。</p><h4 id="缺陷报告的重要组成"><a href="#缺陷报告的重要组成" class="headerlink" title="缺陷报告的重要组成"></a>缺陷报告的重要组成</h4><ol><li><p>缺陷编号（Defect  ID）</p></li><li><p>缺陷标题（summary）</p></li><li><p>缺陷的发现者（Detected  By）</p></li><li><p>发现缺陷的日期（detected  on  date）</p></li><li><p>缺陷所属的模块（subject）</p></li><li><p>发现缺陷版本（detected  in release）</p></li><li><p>指派给谁处理（Assigned  to）</p></li><li><p>缺陷的状态</p><p>​    缺陷的状态(status):描述缺陷此时所处的状态。</p><p>​    例如:<br>​    新提交的缺陷–new<br>​    打开的缺陷–open<br>​    被拒绝的缺陷–rejected<br>​    已经被修改完的缺陷–fixed<br>​    重新打开的缺陷–reopen<br>​    关闭的缺陷–closed </p><ol start="9"><li>缺陷的严重程度</li></ol><p>缺陷的严重程度(severity):指明该缺陷对软件造成的影响程度有多大<br>例如:</p><pre><code>造成死机或影响开发、测试进度的问题--Ur gent        阻塞非常严重的功能问题--Very High                                    严重大的功能问题--High                                                            高中等程度的功能问题一Medium    中，                         一般小的功能问题--Low                                                            低</code></pre><p>注意:</p><pre><code>每个单词代表的具体含义每个公司可能是不一样，应该在测试计划或是在专门        的文档中定义好，以便测试人员和开发人员达成一致</code></pre><p>案例:</p><pre><code>手机测试公司bug leve1 Definition </code></pre><ol start="10"><li><p>缺陷的优先级<br>缺陷的优先级(priority) :希望该缺陷什么时间内或者哪个版本程序员可以解决<br>例如:</p><pre><code>Urgent--立刻修复Very High-- 本版本修复High--下一个版本修复</code></pre><p>   Medium–发布之前修复<br>   Low–允许在发布产品中存在<br>注意:<br>   同样，每个单词代表的具体含义每个公司可能是不一样，应该在测试计划或是                     专门的文档中定义好</p></li><li><p>缺陷的描述</p><p>缺陷描述(description) :把发现这个缺陷的具体步骤记录下来，使开发人员通过你的描述可以看到这个缺陷，以便他去解决这个缺陷</p><p>​    要求:<br>​        描述清晰、准确、易读，使开发人员容易读懂，并可以重现缺陷(初学者练习的重点、难点)。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1、缺陷的严重程度和优先级是不是成正比关系?<br>例如:<br> 界面问题的严重程度-般比较低，但优先级可能最高—立即修复<br> 某些重大的功能问题可能暂时解次不了，但不影响软件其他功能的使用，这时优    先级可能定义的比较低- – - 在发布之前修复<br>2、缺陷的严重程度和优先级确定好以后，还会改吗?<br>例如:<br> 测试人员确定- -个缺陷为“立即修复”，但开发组认为这个缺陷不太好解决，而这    个缺陷又不影响其他功能，这时可能要求在”下一个版本修改”或“发布之前修改”。<br>3、是不是所有已发现的缺陷都会被修复的?</p><pre><code>有些缺陷修复的成本太高或者由于进度压力可能在发布之前得不到修复，这样        的缺陷一定要经过项目组的讨论，权衡成本和风险，要确保不会对用户造成重        大的影响及法律纠纷。后面再通过升级软件或打补丁的方式修复缺陷或弥补缺        陷</code></pre><h4 id="缺陷报告的用途"><a href="#缺陷报告的用途" class="headerlink" title="缺陷报告的用途"></a>缺陷报告的用途</h4><p>​    记录软件缺陷<br>​    对缺陷进行分类<br>​    跟踪软件缺陷</p><p>​    用于缺陷的分析、总结</p><h4 id="软件缺陷的识别"><a href="#软件缺陷的识别" class="headerlink" title="软件缺陷的识别"></a>软件缺陷的识别</h4><p>​    通过测试用例中的预期结果进行识别<br>​    通过需求规格说明书进行识别<br>​    通过和开发人员、需求人员、用户沟通进行识别</p></li></ol></li></ol><pre><code>#### 写缺陷报告时注意的问题​        一个报告只提交一一个缺陷​        缺陷描述清晰、准确、易读，使用最少、必须的步骤，保证缺陷可以再现​        对缺陷的严重性、优先级的划分准确、客观**其他需要注意的问题:**在提交缺陷报告之前一定要认真审核，确保提交的缺陷是有效的，而不是因为自己的疏忽或操作不正确造成的“假缺陷”​        不要为了引起开发人员的重视而夸大缺陷​        小的缺陷也要报告​        及时报告缺陷​        对于不可重现的缺陷也要报告​        不做任何评价</code></pre><h3 id="软件缺陷报告的处理流程"><a href="#软件缺陷报告的处理流程" class="headerlink" title="软件缺陷报告的处理流程"></a>软件缺陷报告的处理流程</h3><p>![Defectsprocess](C:\Users\47260\Pictures\Saved Pictures\Defectsprocess.png)</p><h3 id="缺陷的生命周期"><a href="#缺陷的生命周期" class="headerlink" title="缺陷的生命周期"></a>缺陷的生命周期</h3><p>![QQ图片20200709165020](C:\Users\47260\Pictures\Saved Pictures\QQ图片20200709165020.png)</p><h2 id="软件测试计划"><a href="#软件测试计划" class="headerlink" title="软件测试计划"></a>软件测试计划</h2><p>​    <strong>定义：软件测试计划就是在软件测试工作正式实施之前明确测试的对象，并且通过对    资源、时间、风险、测试范围和预算等方面的综合分析和规划，保证有效实施软件测    试。</strong></p><h4 id="测试计划概述应用："><a href="#测试计划概述应用：" class="headerlink" title="测试计划概述应用："></a>测试计划概述应用：</h4><p>​        软件测试计划应当尽早的制定</p><p>​        软件测试计划在测试活动中处于中心位置</p><p>​        它设定了测试准备工作和执行测试的必备条件</p><p>​        同时形成了测试过程质量保证基础</p><h3 id="测试计划常见的格式与写法："><a href="#测试计划常见的格式与写法：" class="headerlink" title="测试计划常见的格式与写法："></a>测试计划常见的格式与写法：</h3><ol><li><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>产品简介</p><p>测试的目的</p><p>测试范围</p></li></ol><ol start="2"><li><h5 id="测试参考文档和测试提交文档"><a href="#测试参考文档和测试提交文档" class="headerlink" title="测试参考文档和测试提交文档"></a>测试参考文档和测试提交文档</h5><p>测试参考文档</p><p>测试提交文档</p></li><li><h5 id="测试资源"><a href="#测试资源" class="headerlink" title="测试资源"></a>测试资源</h5><p>人力资源</p><p>测试环境</p><p>测试工具</p></li><li><h5 id="问题严重性及优先级描述"><a href="#问题严重性及优先级描述" class="headerlink" title="问题严重性及优先级描述"></a>问题严重性及优先级描述</h5><p>缺陷严重级别定义</p><p>缺陷优先级定义</p><p>缺陷跟踪及测试版本</p></li><li><h5 id="测试风险"><a href="#测试风险" class="headerlink" title="测试风险"></a>测试风险</h5><p>时间资源</p><p>人力资源</p><p>测试版本</p><p>需求变更</p><p>其他</p></li><li><h5 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h5><p>数据库测试</p><p>功能测试</p><p>用户界面测试</p><p>性能评价</p><p>兼容性测试</p><p>安全性测试</p></li><li><h5 id="测试的进度"><a href="#测试的进度" class="headerlink" title="测试的进度"></a>测试的进度</h5></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2020/07/04/%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/04/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的层次"><a href="#计算机的层次" class="headerlink" title="计算机的层次"></a>计算机的层次</h2><p>​        为了更好的理解计算机把计算机分为三个层次：</p><p>​        计算机硬件/裸机—操作系统—应用软件</p><h2 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h2><p>​        <strong>软件  =  程序 + 数据 + 文档</strong></p><h2 id="什么是软件缺陷？"><a href="#什么是软件缺陷？" class="headerlink" title="什么是软件缺陷？"></a>什么是软件缺陷？</h2><h3 id="软件缺陷的定义-一："><a href="#软件缺陷的定义-一：" class="headerlink" title="软件缺陷的定义 一："></a>软件缺陷的定义 一：</h3><p>​    只要满足下列规则之一则称之为发生了一个软件缺陷：</p><p>​    1.软件未实现产品说明书需求的功能</p><p>​    2.软件出现了产品说明书指明不应该出现的功能</p><p>​    3.实现了产品说明书未提及的功能</p><p>​    4.软件未来实现产品说明书虽未明确提及但应该有的功能</p><p>​    5.软件难以理解、不易使运算缓慢、或者从测试员的角度看，最终用户认为不好。</p><h3 id="软件缺陷的定义-二："><a href="#软件缺陷的定义-二：" class="headerlink" title="软件缺陷的定义 二："></a>软件缺陷的定义 二：</h3><p>​    美国电气和电子工程师协会（EEE）对缺项的定义：</p><p>​    从产品内部看：缺陷是软件产品开发或维护过程中存在的错误、毛病的各种问题。从产品外部看：缺陷是系统所需要实现的某种功能的实效或违规背。</p><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><p>​        在现有的软件中寻找缺项的过程</p><p><strong>测试的目的</strong>：</p><p>​    1.发现隐藏在软件中的错误缺陷，并将齐修复。</p><p>​    2.最大程序的满足软件中的错误或缺陷，并将其修复</p><p>​    3.提升软件的质量</p><p><strong>测试的对象</strong>：</p><p>​    需求文档    概要设计    详细设计    <strong>程序</strong>    <strong>数据</strong>    用户文档等</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>​    主要针对给用户使用的功能</p><h4 id="黑盒测试中常用方法"><a href="#黑盒测试中常用方法" class="headerlink" title="黑盒测试中常用方法"></a>黑盒测试中常用方法</h4><ul><li><strong>等价类划分法</strong></li><li><strong>边界值分析法</strong></li><li>因果图法</li><li>决策法</li><li><strong>错误推测法</strong></li><li>正交实验法</li><li><strong>场景法</strong></li><li>等</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>​    针对结构的测试        </p><p>​    程序员测试、结构测试、逻辑驱动测试</p><h3 id="黑盒测试与白盒测试的区别"><a href="#黑盒测试与白盒测试的区别" class="headerlink" title="黑盒测试与白盒测试的区别"></a>黑盒测试与白盒测试的区别</h3><table><thead><tr><th></th><th>黑盒测试</th><th align="center">白盒测试</th></tr></thead><tbody><tr><td>规划方面</td><td>针对功能测试</td><td align="center">针对结构测试</td></tr><tr><td>优势方面</td><td>能确保从用户使用角度出发进行测试</td><td align="center">能够对程序内部的特征部位进行覆盖测试</td></tr><tr><td>应用举例</td><td>等价划分  边界值分析法  因果图法  状态图测试法</td><td align="center">语句覆盖、判断覆盖、条件覆盖、判断/条件覆盖、基本路径覆盖、循环覆盖、模块接口测试</td></tr></tbody></table><h3 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h3><p>​    介于白盒测试与黑盒测试之间的测试。</p><p>​    结合了白盒测试盒黑盒测试的要素。灰盒测试关注输出对于输入的正确性；同时也关注内部表现，但这种关注不像白盒测试那样详细、完整，只是通过一些表征的现象，事件、标志来判断内部的运行状态。</p><h3 id="按是否需要运行代码（转态）划分"><a href="#按是否需要运行代码（转态）划分" class="headerlink" title="按是否需要运行代码（转态）划分"></a>按是否需要运行代码（转态）划分</h3><h4 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h4><p>静态测试是指不实际运行被测试软件，而只是静态检查程序代码、界面或者文档中可能存在的错误。</p><p>静态测试技术又称为静态分析技术，实际上对软件中的需求说明书、设计说明书、程序源代码的进行非运行的检查。</p><p>静态测试包括：代码测试（代码查找）、界面测试、文档测试等</p><blockquote><p>代码测试，主要测试是否符合相应的的标准和规范。</p><p>界面测试，主要测试软件的实际界面与需求中说明是否相符。</p><p>文档测试，主要测试用户手册和需求说明是否真正符合用户的实际需求。</p></blockquote><h4 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h4><p>​    动态测试是指通过人工或使用工具运行的程序进行检查、分析程序的执行状态和程序的外部表现</p><p>​    实际运行被测程序，输入相应的测试数据，检查实际输出结果和预期结果是否相符</p><h3 id="安软件特性分类"><a href="#安软件特性分类" class="headerlink" title="安软件特性分类"></a>安软件特性分类</h3><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><h4 id="反测"><a href="#反测" class="headerlink" title="反测"></a>反测</h4><h4 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h4><h4 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文案</title>
      <link href="/2020/06/08/%E6%96%87%E6%A1%88/"/>
      <url>/2020/06/08/%E6%96%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="山君文案"><a href="#山君文案" class="headerlink" title="山君文案"></a>山君文案</h1><h2 id="村上春树语录"><a href="#村上春树语录" class="headerlink" title="村上春树语录"></a>村上春树语录</h2><ul><li><p>你要做一一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另<br>外的生活。你要听话，不是所有的鱼都会生活在同一片海里。—《舞!舞!舞!》</p></li><li><p>哪里会有人喜欢孤独，不过是不喜欢失望罢了。—《挪威的森林》</p></li><li><p>失去理智的人怀抱的美好的幻想，在现实世界中根本是子虚乌有。—《当我谈跑步时我谈些什么》</p></li><li><p>如果你掉进了黑暗里，你能做的，不过是静心等待,直到你的双眼适应黑暗。—《挪威的森林》</p></li><li><p>世上存在着不能流泪的悲哀，这种悲哀无法向人解释，即使解释人家也不会理解。它永远一成不变，如无风夜晚的雪花静静沉积在心底。-《世界尽头与冷酷仙境》</p></li><li><p>少年时我们追求激情，成熟后却迷恋平庸，在我们寻找，伤害，背离之后，还能一-如既往的相信爱情，这是-种勇气。每个人都有属于自己的一片森林，迷失的人迷失了，相逢的人会再相逢。—《挪威的森林》</p></li><li><p>不必太纠结于当下，也不必太忧虑未来，当你经历过-些事情的时候，眼前的风景已经和从前不一样了。—《1Q84》</p></li><li><p>任凭怎么解释，世人也只能相信自己愿意相信的事情。越是拼命挣扎，我们的处境越是狼狈。—《挪威的森林》</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 摘要 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于站长</title>
      <link href="/2020/06/07/%E5%85%B3%E4%BA%8E%E7%AB%99%E9%95%BF/"/>
      <url>/2020/06/07/%E5%85%B3%E4%BA%8E%E7%AB%99%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="站长个人信息"><a href="#站长个人信息" class="headerlink" title="站长个人信息"></a>站长个人信息</h1><h2 id="这里只是简单的写点自我介绍"><a href="#这里只是简单的写点自我介绍" class="headerlink" title="这里只是简单的写点自我介绍"></a>这里只是简单的写点自我介绍</h2><ul><li>一个初入江湖的小菜鸟</li><li>所学专业：目前专科应届毕业生软件技术</li><li>工作经验：</li><li>特长：武术</li><li>爱好：短视频制作、运动、音乐、电竞。</li><li>喜欢的音乐:《下山》、《桥边姑娘》、《少年》等热歌榜歌曲。</li><li>喜欢的武术：梅花拳、八卦、形意、太极。</li><li>喜欢的动画影视剧：《师父》、《斗罗大陆》、《犬夜叉》、《侠肝义胆沈剑心》、《秦时明月》、《胡歌系列》等。</li><li>喜欢的音乐人：张杰、邓紫棋、陈奕迅、周杰伦等。</li><li>喜欢的书籍：杜子建老师抖音商柜推荐的书籍。</li><li>理想的生活：不“畏”柴米油盐贵！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
